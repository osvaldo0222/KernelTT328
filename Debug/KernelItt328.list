
KernelItt328.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf0  08005bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf8  08005bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  2000000c  08005c0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  08005c0c  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001605d  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c4  00000000  00000000  00036097  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  00039160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003a458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028f05  00000000  00000000  0003b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001092b  00000000  00000000  000644ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd30e  00000000  00000000  00074dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001720e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e4c  00000000  00000000  00172164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005ba8 	.word	0x08005ba8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005ba8 	.word	0x08005ba8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f94b 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f005 f850 	bl	80055ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f965 	bl	8000842 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f92d 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000034 	.word	0x20000034

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000034 	.word	0x20000034

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000004 	.word	0x20000004

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <__NVIC_SetPriorityGrouping+0x40>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x40>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	05fa0000 	.word	0x05fa0000

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff29 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff3e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff31 	bl	800069c <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b02      	cmp	r3, #2
 800086c:	d004      	beq.n	8000878 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e00c      	b.n	8000892 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2205      	movs	r2, #5
 800087c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f022 0201 	bic.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80008b0:	4ba9      	ldr	r3, [pc, #676]	; (8000b58 <HAL_ETH_Init+0x2b8>)
 80008b2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e183      	b.n	8000bce <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f004 f93e 	bl	8004b5c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e0:	4b9e      	ldr	r3, [pc, #632]	; (8000b5c <HAL_ETH_Init+0x2bc>)
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	4a9d      	ldr	r2, [pc, #628]	; (8000b5c <HAL_ETH_Init+0x2bc>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6453      	str	r3, [r2, #68]	; 0x44
 80008ec:	4b9b      	ldr	r3, [pc, #620]	; (8000b5c <HAL_ETH_Init+0x2bc>)
 80008ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008f8:	4b99      	ldr	r3, [pc, #612]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a98      	ldr	r2, [pc, #608]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 80008fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000902:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000904:	4b96      	ldr	r3, [pc, #600]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4994      	ldr	r1, [pc, #592]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 800090e:	4313      	orrs	r3, r2
 8000910:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0201 	orr.w	r2, r2, #1
 8000924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000928:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800092a:	f7ff fe57 	bl	80005dc <HAL_GetTick>
 800092e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000930:	e011      	b.n	8000956 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000932:	f7ff fe53 	bl	80005dc <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000940:	d909      	bls.n	8000956 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2203      	movs	r2, #3
 8000946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e13b      	b.n	8000bce <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1e4      	bne.n	8000932 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f023 031c 	bic.w	r3, r3, #28
 8000976:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000978:	f001 fb90 	bl	800209c <HAL_RCC_GetHCLKFreq>
 800097c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	4a78      	ldr	r2, [pc, #480]	; (8000b64 <HAL_ETH_Init+0x2c4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d908      	bls.n	8000998 <HAL_ETH_Init+0xf8>
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	4a77      	ldr	r2, [pc, #476]	; (8000b68 <HAL_ETH_Init+0x2c8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d804      	bhi.n	8000998 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	e027      	b.n	80009e8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	4a73      	ldr	r2, [pc, #460]	; (8000b68 <HAL_ETH_Init+0x2c8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d908      	bls.n	80009b2 <HAL_ETH_Init+0x112>
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	4a72      	ldr	r2, [pc, #456]	; (8000b6c <HAL_ETH_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d804      	bhi.n	80009b2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f043 030c 	orr.w	r3, r3, #12
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e01a      	b.n	80009e8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4a6d      	ldr	r2, [pc, #436]	; (8000b6c <HAL_ETH_Init+0x2cc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d903      	bls.n	80009c2 <HAL_ETH_Init+0x122>
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4a6c      	ldr	r2, [pc, #432]	; (8000b70 <HAL_ETH_Init+0x2d0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d911      	bls.n	80009e6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4a6a      	ldr	r2, [pc, #424]	; (8000b70 <HAL_ETH_Init+0x2d0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d908      	bls.n	80009dc <HAL_ETH_Init+0x13c>
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	4a69      	ldr	r2, [pc, #420]	; (8000b74 <HAL_ETH_Init+0x2d4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d804      	bhi.n	80009dc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	e005      	b.n	80009e8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e000      	b.n	80009e8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	69fa      	ldr	r2, [r7, #28]
 80009ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f4:	2100      	movs	r1, #0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f956 	bl	8000ca8 <HAL_ETH_WritePHYRegister>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00b      	beq.n	8000a1a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a06:	6939      	ldr	r1, [r7, #16]
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f9b3 	bl	8000d74 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2201      	movs	r2, #1
 8000a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e0d9      	b.n	8000bce <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a1a:	20ff      	movs	r0, #255	; 0xff
 8000a1c:	f7ff fdea 	bl	80005f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80a7 	beq.w	8000b78 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a2a:	f7ff fdd7 	bl	80005dc <HAL_GetTick>
 8000a2e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	461a      	mov	r2, r3
 8000a36:	2101      	movs	r1, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f8cd 	bl	8000bd8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a3e:	f7ff fdcd 	bl	80005dc <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d90f      	bls.n	8000a70 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a54:	6939      	ldr	r1, [r7, #16]
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f98c 	bl	8000d74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e0ae      	b.n	8000bce <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0da      	beq.n	8000a30 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f911 	bl	8000ca8 <HAL_ETH_WritePHYRegister>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a90:	6939      	ldr	r1, [r7, #16]
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f96e 	bl	8000d74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e094      	b.n	8000bce <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000aa4:	f7ff fd9a 	bl	80005dc <HAL_GetTick>
 8000aa8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f890 	bl	8000bd8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ab8:	f7ff fd90 	bl	80005dc <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d90f      	bls.n	8000aea <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ace:	6939      	ldr	r1, [r7, #16]
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f94f 	bl	8000d74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e071      	b.n	8000bce <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0da      	beq.n	8000aaa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	461a      	mov	r2, r3
 8000afa:	211f      	movs	r1, #31
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f86b 	bl	8000bd8 <HAL_ETH_ReadPHYRegister>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b0c:	6939      	ldr	r1, [r7, #16]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f930 	bl	8000d74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e056      	b.n	8000bce <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	e002      	b.n	8000b3a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	e037      	b.n	8000bbc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	e032      	b.n	8000bbc <HAL_ETH_Init+0x31c>
 8000b56:	bf00      	nop
 8000b58:	03938700 	.word	0x03938700
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40013800 	.word	0x40013800
 8000b64:	01312cff 	.word	0x01312cff
 8000b68:	02160ebf 	.word	0x02160ebf
 8000b6c:	039386ff 	.word	0x039386ff
 8000b70:	05f5e0ff 	.word	0x05f5e0ff
 8000b74:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f889 	bl	8000ca8 <HAL_ETH_WritePHYRegister>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00b      	beq.n	8000bb4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f8e6 	bl	8000d74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e00c      	b.n	8000bce <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000bb4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bb8:	f7ff fd1c 	bl	80005f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f8d8 	bl	8000d74 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop

08000bd8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	460b      	mov	r3, r1
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b82      	cmp	r3, #130	; 0x82
 8000bf8:	d101      	bne.n	8000bfe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e050      	b.n	8000ca0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2282      	movs	r2, #130	; 0x82
 8000c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 031c 	and.w	r3, r3, #28
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	8a1b      	ldrh	r3, [r3, #16]
 8000c1a:	02db      	lsls	r3, r3, #11
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c24:	897b      	ldrh	r3, [r7, #10]
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f023 0302 	bic.w	r3, r3, #2
 8000c38:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c4a:	f7ff fcc7 	bl	80005dc <HAL_GetTick>
 8000c4e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c50:	e015      	b.n	8000c7e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c52:	f7ff fcc3 	bl	80005dc <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c60:	d309      	bcc.n	8000c76 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e014      	b.n	8000ca0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e4      	bne.n	8000c52 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b42      	cmp	r3, #66	; 0x42
 8000cc8:	d101      	bne.n	8000cce <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e04e      	b.n	8000d6c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2242      	movs	r2, #66	; 0x42
 8000cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f003 031c 	and.w	r3, r3, #28
 8000ce4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	8a1b      	ldrh	r3, [r3, #16]
 8000cea:	02db      	lsls	r3, r3, #11
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cf4:	897b      	ldrh	r3, [r7, #10]
 8000cf6:	019b      	lsls	r3, r3, #6
 8000cf8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d24:	f7ff fc5a 	bl	80005dc <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d2a:	e015      	b.n	8000d58 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d2c:	f7ff fc56 	bl	80005dc <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d309      	bcc.n	8000d50 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e00d      	b.n	8000d6c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1e4      	bne.n	8000d2c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0b0      	sub	sp, #192	; 0xc0
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d90:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d98:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8000dc0:	e001      	b.n	8000dc6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dca:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e4c:	4bab      	ldr	r3, [pc, #684]	; (80010fc <ETH_MACDMAConfig+0x388>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e58:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e5c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e60:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e66:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e6a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e6e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e74:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e78:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e7c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e80:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e84:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e9c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fba3 	bl	80005f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000eb6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000eb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ebc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000ec0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000ec6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000ecc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000ed2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000ed8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000edc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000ee4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ee6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fb7e 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f00:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f0a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000f14:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000f20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f24:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f28:	4013      	ands	r3, r2
 8000f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f32:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000f34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f38:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000f3e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000f44:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000f4a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f50:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f64:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fb3f 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f7e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fb2a 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fa8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000fb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fbc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f241 0318 	movw	r3, #4120	; 0x1018
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <ETH_MACDMAConfig+0x38c>)
 800100c:	4013      	ands	r3, r2
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001012:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001014:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001016:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001018:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800101a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800101c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800101e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001020:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001022:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001024:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001026:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001028:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800102a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800102e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001030:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001032:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001034:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001038:	4313      	orrs	r3, r2
 800103a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f241 0318 	movw	r3, #4120	; 0x1018
 8001046:	4413      	add	r3, r2
 8001048:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800104c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f241 0318 	movw	r3, #4120	; 0x1018
 8001056:	4413      	add	r3, r2
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fac8 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f241 0318 	movw	r3, #4120	; 0x1018
 800106c:	4413      	add	r3, r2
 800106e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001072:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001078:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800107c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001080:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001084:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001088:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800108a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800108c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800108e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800109c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff faa1 	bl	80005f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010be:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10d      	bne.n	80010e4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f241 031c 	movw	r3, #4124	; 0x101c
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <ETH_MACDMAConfig+0x390>)
 80010da:	431a      	orrs	r2, r3
 80010dc:	f241 031c 	movw	r3, #4124	; 0x101c
 80010e0:	440b      	add	r3, r1
 80010e2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	461a      	mov	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f80b 	bl	8001108 <ETH_MACAddressConfig>
}
 80010f2:	bf00      	nop
 80010f4:	37c0      	adds	r7, #192	; 0xc0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	ff20810f 	.word	0xff20810f
 8001100:	f8de3f23 	.word	0xf8de3f23
 8001104:	00010040 	.word	0x00010040

08001108 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3305      	adds	r3, #5
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	3204      	adds	r2, #4
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <ETH_MACAddressConfig+0x68>)
 800112a:	4413      	add	r3, r2
 800112c:	461a      	mov	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3303      	adds	r3, #3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	061a      	lsls	r2, r3, #24
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3302      	adds	r3, #2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	4313      	orrs	r3, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	4313      	orrs	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <ETH_MACAddressConfig+0x6c>)
 800115a:	4413      	add	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40028040 	.word	0x40028040
 8001174:	40028044 	.word	0x40028044

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e175      	b.n	8001484 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8164 	bne.w	800147e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x4e>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	69b9      	ldr	r1, [r7, #24]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d00b      	beq.n	8001262 <HAL_GPIO_Init+0xea>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001256:	2b11      	cmp	r3, #17
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b12      	cmp	r3, #18
 8001260:	d130      	bne.n	80012c4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80be 	beq.w	800147e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b65      	ldr	r3, [pc, #404]	; (8001498 <HAL_GPIO_Init+0x320>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a64      	ldr	r2, [pc, #400]	; (8001498 <HAL_GPIO_Init+0x320>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <HAL_GPIO_Init+0x320>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800131a:	4a60      	ldr	r2, [pc, #384]	; (800149c <HAL_GPIO_Init+0x324>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a57      	ldr	r2, [pc, #348]	; (80014a0 <HAL_GPIO_Init+0x328>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d037      	beq.n	80013b6 <HAL_GPIO_Init+0x23e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d031      	beq.n	80013b2 <HAL_GPIO_Init+0x23a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02b      	beq.n	80013ae <HAL_GPIO_Init+0x236>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a54      	ldr	r2, [pc, #336]	; (80014ac <HAL_GPIO_Init+0x334>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x232>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a53      	ldr	r2, [pc, #332]	; (80014b0 <HAL_GPIO_Init+0x338>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x22e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_GPIO_Init+0x33c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x22a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_GPIO_Init+0x340>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x226>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a50      	ldr	r2, [pc, #320]	; (80014bc <HAL_GPIO_Init+0x344>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x222>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4f      	ldr	r2, [pc, #316]	; (80014c0 <HAL_GPIO_Init+0x348>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x21e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4e      	ldr	r2, [pc, #312]	; (80014c4 <HAL_GPIO_Init+0x34c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x21a>
 800138e:	2309      	movs	r3, #9
 8001390:	e012      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 8001392:	230a      	movs	r3, #10
 8001394:	e010      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 8001396:	2308      	movs	r3, #8
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 800139a:	2307      	movs	r3, #7
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013c8:	4934      	ldr	r1, [pc, #208]	; (800149c <HAL_GPIO_Init+0x324>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_GPIO_Init+0x350>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_GPIO_Init+0x350>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_GPIO_Init+0x350>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <HAL_GPIO_Init+0x350>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae86 	bls.w	8001198 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	3724      	adds	r7, #36	; 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40021c00 	.word	0x40021c00
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40022400 	.word	0x40022400
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001500:	b08f      	sub	sp, #60	; 0x3c
 8001502:	af0a      	add	r7, sp, #40	; 0x28
 8001504:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e10a      	b.n	8001726 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d106      	bne.n	800152a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f004 fa8d 	bl	8005a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f874 	bl	8004624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	687e      	ldr	r6, [r7, #4]
 8001544:	466d      	mov	r5, sp
 8001546:	f106 0410 	add.w	r4, r6, #16
 800154a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001556:	e885 0003 	stmia.w	r5, {r0, r1}
 800155a:	1d33      	adds	r3, r6, #4
 800155c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f003 f808 	bl	8004574 <USB_CoreInit>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2202      	movs	r2, #2
 800156e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0d7      	b.n	8001726 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f003 f862 	bl	8004646 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e04a      	b.n	800161e <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	333d      	adds	r3, #61	; 0x3d
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	333c      	adds	r3, #60	; 0x3c
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	b298      	uxth	r0, r3
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3342      	adds	r3, #66	; 0x42
 80015c4:	4602      	mov	r2, r0
 80015c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	333f      	adds	r3, #63	; 0x3f
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3344      	adds	r3, #68	; 0x44
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3348      	adds	r3, #72	; 0x48
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3350      	adds	r3, #80	; 0x50
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3af      	bcc.n	8001588 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e044      	b.n	80016b8 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	3301      	adds	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3b5      	bcc.n	800162e <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	687e      	ldr	r6, [r7, #4]
 80016ca:	466d      	mov	r5, sp
 80016cc:	f106 0410 	add.w	r4, r6, #16
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e0:	1d33      	adds	r3, r6, #4
 80016e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f002 ffd9 	bl	800469c <USB_DevInit>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e014      	b.n	8001726 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	2b01      	cmp	r3, #1
 8001712:	d102      	bne.n	800171a <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f80b 	bl	8001730 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f999 	bl	8004a56 <USB_DevDisconnect>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_PCDEx_ActivateLPM+0x44>)
 8001760:	4313      	orrs	r3, r2
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	10000003 	.word	0x10000003

08001778 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40007000 	.word	0x40007000

08001798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_PWREx_EnableOverDrive+0x98>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c6:	f7fe ff09 	bl	80005dc <HAL_GetTick>
 80017ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017cc:	e009      	b.n	80017e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017ce:	f7fe ff05 	bl	80005dc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017dc:	d901      	bls.n	80017e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e022      	b.n	8001828 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d1ee      	bne.n	80017ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fc:	f7fe feee 	bl	80005dc <HAL_GetTick>
 8001800:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001802:	e009      	b.n	8001818 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001804:	f7fe feea 	bl	80005dc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001812:	d901      	bls.n	8001818 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e007      	b.n	8001828 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_PWREx_EnableOverDrive+0x9c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001824:	d1ee      	bne.n	8001804 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e25e      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8087 	beq.w	800196a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800185c:	4b96      	ldr	r3, [pc, #600]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b04      	cmp	r3, #4
 8001866:	d00c      	beq.n	8001882 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001868:	4b93      	ldr	r3, [pc, #588]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d112      	bne.n	800189a <HAL_RCC_OscConfig+0x62>
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001880:	d10b      	bne.n	800189a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d06c      	beq.n	8001968 <HAL_RCC_OscConfig+0x130>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d168      	bne.n	8001968 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e238      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x7a>
 80018a4:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a83      	ldr	r2, [pc, #524]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e02e      	b.n	8001910 <HAL_RCC_OscConfig+0xd8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x9c>
 80018ba:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7e      	ldr	r2, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xd8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0xc0>
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a72      	ldr	r2, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xd8>
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7fe fe60 	bl	80005dc <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7fe fe5c 	bl	80005dc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1ec      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xe8>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7fe fe4c 	bl	80005dc <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7fe fe48 	bl	80005dc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1d8      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x110>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d069      	beq.n	8001a4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x190>
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x17a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1ac      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	493d      	ldr	r1, [pc, #244]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e040      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a38      	ldr	r2, [pc, #224]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7fe fdfe 	bl	80005dc <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e4:	f7fe fdfa 	bl	80005dc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e18a      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4929      	ldr	r1, [pc, #164]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
 8001a16:	e018      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7fe fdda 	bl	80005dc <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7fe fdd6 	bl	80005dc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e166      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d038      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d019      	beq.n	8001a92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a62:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7fe fdb7 	bl	80005dc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7fe fdb3 	bl	80005dc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e143      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x23a>
 8001a90:	e01a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_RCC_OscConfig+0x280>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fd9d 	bl	80005dc <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fd99 	bl	80005dc <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d903      	bls.n	8001abc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e129      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
 8001ab8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	4b95      	ldr	r3, [pc, #596]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a4 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b8f      	ldr	r3, [pc, #572]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b8c      	ldr	r3, [pc, #560]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a8b      	ldr	r2, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	4b86      	ldr	r3, [pc, #536]	; (8001d18 <HAL_RCC_OscConfig+0x4e0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b0a:	4b83      	ldr	r3, [pc, #524]	; (8001d18 <HAL_RCC_OscConfig+0x4e0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a82      	ldr	r2, [pc, #520]	; (8001d18 <HAL_RCC_OscConfig+0x4e0>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7fe fd61 	bl	80005dc <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7fe fd5d 	bl	80005dc <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0ed      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b30:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <HAL_RCC_OscConfig+0x4e0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x31a>
 8001b44:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a72      	ldr	r2, [pc, #456]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x376>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x33c>
 8001b5a:	4b6e      	ldr	r3, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a6d      	ldr	r2, [pc, #436]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a6a      	ldr	r2, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x376>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x35e>
 8001b7c:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x376>
 8001b96:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a5e      	ldr	r2, [pc, #376]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7fe fd11 	bl	80005dc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7fe fd0d 	bl	80005dc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e09b      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x386>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7fe fcfb 	bl	80005dc <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7fe fcf7 	bl	80005dc <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e085      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d071      	beq.n	8001d0a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d069      	beq.n	8001d06 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d14b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a35      	ldr	r2, [pc, #212]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7fe fcc9 	bl	80005dc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe fcc5 	bl	80005dc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e055      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	019b      	lsls	r3, r3, #6
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	071b      	lsls	r3, r3, #28
 8001c98:	491e      	ldr	r1, [pc, #120]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7fe fc97 	bl	80005dc <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7fe fc93 	bl	80005dc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e023      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x47a>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe fc7d 	bl	80005dc <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe fc79 	bl	80005dc <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e009      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4ae>
 8001d04:	e001      	b.n	8001d0a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0ce      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d910      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 020f 	bic.w	r2, r3, #15
 8001d4a:	4964      	ldr	r1, [pc, #400]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b6      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b52      	ldr	r3, [pc, #328]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494c      	ldr	r1, [pc, #304]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d040      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d115      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07d      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e071      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e069      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7fe fbe4 	bl	80005dc <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f7fe fbe0 	bl	80005dc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e051      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 020c 	and.w	r2, r3, #12
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1eb      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d210      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 020f 	bic.w	r2, r3, #15
 8001e56:	4921      	ldr	r1, [pc, #132]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e030      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4915      	ldr	r1, [pc, #84]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f81d 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7fe fb42 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08005bd8 	.word	0x08005bd8
 8001ee8:	20000008 	.word	0x20000008

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d007      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x32>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d008      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x38>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80b4 	bne.w	8002080 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f1a:	60bb      	str	r3, [r7, #8]
       break;
 8001f1c:	e0b3      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f1e:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f20:	60bb      	str	r3, [r7, #8]
      break;
 8001f22:	e0b0      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d04a      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3a:	4b55      	ldr	r3, [pc, #340]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	099b      	lsrs	r3, r3, #6
 8001f40:	f04f 0400 	mov.w	r4, #0
 8001f44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	ea03 0501 	and.w	r5, r3, r1
 8001f50:	ea04 0602 	and.w	r6, r4, r2
 8001f54:	4629      	mov	r1, r5
 8001f56:	4632      	mov	r2, r6
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	f04f 0400 	mov.w	r4, #0
 8001f60:	0154      	lsls	r4, r2, #5
 8001f62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f66:	014b      	lsls	r3, r1, #5
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	1b49      	subs	r1, r1, r5
 8001f6e:	eb62 0206 	sbc.w	r2, r2, r6
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	0194      	lsls	r4, r2, #6
 8001f7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f80:	018b      	lsls	r3, r1, #6
 8001f82:	1a5b      	subs	r3, r3, r1
 8001f84:	eb64 0402 	sbc.w	r4, r4, r2
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	00e2      	lsls	r2, r4, #3
 8001f92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f96:	00d9      	lsls	r1, r3, #3
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	195b      	adds	r3, r3, r5
 8001f9e:	eb44 0406 	adc.w	r4, r4, r6
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	0262      	lsls	r2, r4, #9
 8001fac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fb0:	0259      	lsls	r1, r3, #9
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4621      	mov	r1, r4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f04f 0400 	mov.w	r4, #0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	f7fe f938 	bl	8000238 <__aeabi_uldivmod>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	460c      	mov	r4, r1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e049      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	f04f 0400 	mov.w	r4, #0
 8001fda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	ea03 0501 	and.w	r5, r3, r1
 8001fe6:	ea04 0602 	and.w	r6, r4, r2
 8001fea:	4629      	mov	r1, r5
 8001fec:	4632      	mov	r2, r6
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	f04f 0400 	mov.w	r4, #0
 8001ff6:	0154      	lsls	r4, r2, #5
 8001ff8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ffc:	014b      	lsls	r3, r1, #5
 8001ffe:	4619      	mov	r1, r3
 8002000:	4622      	mov	r2, r4
 8002002:	1b49      	subs	r1, r1, r5
 8002004:	eb62 0206 	sbc.w	r2, r2, r6
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	f04f 0400 	mov.w	r4, #0
 8002010:	0194      	lsls	r4, r2, #6
 8002012:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002016:	018b      	lsls	r3, r1, #6
 8002018:	1a5b      	subs	r3, r3, r1
 800201a:	eb64 0402 	sbc.w	r4, r4, r2
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	00e2      	lsls	r2, r4, #3
 8002028:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800202c:	00d9      	lsls	r1, r3, #3
 800202e:	460b      	mov	r3, r1
 8002030:	4614      	mov	r4, r2
 8002032:	195b      	adds	r3, r3, r5
 8002034:	eb44 0406 	adc.w	r4, r4, r6
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	02a2      	lsls	r2, r4, #10
 8002042:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002046:	0299      	lsls	r1, r3, #10
 8002048:	460b      	mov	r3, r1
 800204a:	4614      	mov	r4, r2
 800204c:	4618      	mov	r0, r3
 800204e:	4621      	mov	r1, r4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 0400 	mov.w	r4, #0
 8002056:	461a      	mov	r2, r3
 8002058:	4623      	mov	r3, r4
 800205a:	f7fe f8ed 	bl	8000238 <__aeabi_uldivmod>
 800205e:	4603      	mov	r3, r0
 8002060:	460c      	mov	r4, r1
 8002062:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	60bb      	str	r3, [r7, #8]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002082:	60bb      	str	r3, [r7, #8]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	68bb      	ldr	r3, [r7, #8]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	00f42400 	.word	0x00f42400
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4601      	mov	r1, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08005be8 	.word	0x08005be8

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4601      	mov	r1, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08005be8 	.word	0x08005be8

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800212c:	4b69      	ldr	r3, [pc, #420]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a68      	ldr	r2, [pc, #416]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002136:	6093      	str	r3, [r2, #8]
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	4964      	ldr	r1, [pc, #400]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d017      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	4959      	ldr	r1, [pc, #356]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d017      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	494a      	ldr	r1, [pc, #296]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b8:	d101      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 808b 	beq.w	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	4a39      	ldr	r2, [pc, #228]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220c:	f7fe f9e6 	bl	80005dc <HAL_GetTick>
 8002210:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002214:	f7fe f9e2 	bl	80005dc <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e38d      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d035      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d02e      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002258:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d114      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe f9aa 	bl	80005dc <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe f9a6 	bl	80005dc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e34f      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ee      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ba:	d111      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	4901      	ldr	r1, [pc, #4]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
 80022d2:	e00b      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	0ffffcff 	.word	0x0ffffcff
 80022e0:	4bb3      	ldr	r3, [pc, #716]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4ab2      	ldr	r2, [pc, #712]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ea:	6093      	str	r3, [r2, #8]
 80022ec:	4bb0      	ldr	r3, [pc, #704]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	49ad      	ldr	r1, [pc, #692]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800230a:	4ba9      	ldr	r3, [pc, #676]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002310:	4aa7      	ldr	r2, [pc, #668]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002316:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800231a:	4ba5      	ldr	r3, [pc, #660]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800231c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	49a2      	ldr	r1, [pc, #648]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002338:	4b9d      	ldr	r3, [pc, #628]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002346:	499a      	ldr	r1, [pc, #616]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800235a:	4b95      	ldr	r3, [pc, #596]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002368:	4991      	ldr	r1, [pc, #580]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800237c:	4b8c      	ldr	r3, [pc, #560]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238a:	4989      	ldr	r1, [pc, #548]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800239e:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4980      	ldr	r1, [pc, #512]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c0:	4b7b      	ldr	r3, [pc, #492]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f023 0203 	bic.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4978      	ldr	r1, [pc, #480]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e2:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f023 020c 	bic.w	r2, r3, #12
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	496f      	ldr	r1, [pc, #444]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002404:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4967      	ldr	r1, [pc, #412]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002426:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	495e      	ldr	r1, [pc, #376]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	4956      	ldr	r1, [pc, #344]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	494d      	ldr	r1, [pc, #308]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	4945      	ldr	r1, [pc, #276]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	493c      	ldr	r1, [pc, #240]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024de:	4934      	ldr	r1, [pc, #208]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d011      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002500:	492b      	ldr	r1, [pc, #172]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800250c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	491b      	ldr	r1, [pc, #108]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002564:	4912      	ldr	r1, [pc, #72]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002588:	4909      	ldr	r1, [pc, #36]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00f      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	e002      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	4985      	ldr	r1, [pc, #532]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025c8:	4b80      	ldr	r3, [pc, #512]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d8:	497c      	ldr	r1, [pc, #496]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d005      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ee:	f040 80d6 	bne.w	800279e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fe:	f7fd ffed 	bl	80005dc <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002606:	f7fd ffe9 	bl	80005dc <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e194      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11d      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002638:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800263a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002646:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264c:	0e1b      	lsrs	r3, r3, #24
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	019a      	lsls	r2, r3, #6
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	071b      	lsls	r3, r3, #28
 800266c:	4957      	ldr	r1, [pc, #348]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02e      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d129      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026a0:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b4:	0f1b      	lsrs	r3, r3, #28
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	019a      	lsls	r2, r3, #6
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	071b      	lsls	r3, r3, #28
 80026d4:	493d      	ldr	r1, [pc, #244]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e2:	f023 021f 	bic.w	r2, r3, #31
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	3b01      	subs	r3, #1
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01d      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002706:	0e1b      	lsrs	r3, r3, #24
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002714:	0f1b      	lsrs	r3, r3, #28
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	019a      	lsls	r2, r3, #6
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	431a      	orrs	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	431a      	orrs	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	071b      	lsls	r3, r3, #28
 8002734:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d011      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	019a      	lsls	r2, r3, #6
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	071b      	lsls	r3, r3, #28
 8002764:	4919      	ldr	r1, [pc, #100]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fd ff30 	bl	80005dc <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002780:	f7fd ff2c 	bl	80005dc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0d7      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	f040 80cd 	bne.w	8002940 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b2:	f7fd ff13 	bl	80005dc <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027ba:	f7fd ff0f 	bl	80005dc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d903      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0ba      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80027cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027d0:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027dc:	d0ed      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d12a      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002814:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	0f1b      	lsrs	r3, r3, #28
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	019a      	lsls	r2, r3, #6
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	071b      	lsls	r3, r3, #28
 800283a:	4944      	ldr	r1, [pc, #272]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002842:	4b42      	ldr	r3, [pc, #264]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002848:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	493d      	ldr	r1, [pc, #244]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d022      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002870:	d11d      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	0e1b      	lsrs	r3, r3, #24
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	0f1b      	lsrs	r3, r3, #28
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	019a      	lsls	r2, r3, #6
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	071b      	lsls	r3, r3, #28
 80028a6:	4929      	ldr	r1, [pc, #164]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	0e1b      	lsrs	r3, r3, #24
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	019a      	lsls	r2, r3, #6
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	071b      	lsls	r3, r3, #28
 80028ee:	4917      	ldr	r1, [pc, #92]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4911      	ldr	r1, [pc, #68]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002918:	f7fd fe60 	bl	80005dc <HAL_GetTick>
 800291c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002920:	f7fd fe5c 	bl	80005dc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e007      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800293a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800293e:	d1ef      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e01d      	b.n	800299e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f002 ff62 	bl	8005840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 fa10 	bl	8002db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e01d      	b.n	80029f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f815 	bl	80029fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f000 f9e5 	bl	8002db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e105      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b14      	cmp	r3, #20
 8002a3e:	f200 80f0 	bhi.w	8002c22 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a9d 	.word	0x08002a9d
 8002a4c:	08002c23 	.word	0x08002c23
 8002a50:	08002c23 	.word	0x08002c23
 8002a54:	08002c23 	.word	0x08002c23
 8002a58:	08002add 	.word	0x08002add
 8002a5c:	08002c23 	.word	0x08002c23
 8002a60:	08002c23 	.word	0x08002c23
 8002a64:	08002c23 	.word	0x08002c23
 8002a68:	08002b1f 	.word	0x08002b1f
 8002a6c:	08002c23 	.word	0x08002c23
 8002a70:	08002c23 	.word	0x08002c23
 8002a74:	08002c23 	.word	0x08002c23
 8002a78:	08002b5f 	.word	0x08002b5f
 8002a7c:	08002c23 	.word	0x08002c23
 8002a80:	08002c23 	.word	0x08002c23
 8002a84:	08002c23 	.word	0x08002c23
 8002a88:	08002ba1 	.word	0x08002ba1
 8002a8c:	08002c23 	.word	0x08002c23
 8002a90:	08002c23 	.word	0x08002c23
 8002a94:	08002c23 	.word	0x08002c23
 8002a98:	08002be1 	.word	0x08002be1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fa26 	bl	8002ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0208 	orr.w	r2, r2, #8
 8002ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6999      	ldr	r1, [r3, #24]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	619a      	str	r2, [r3, #24]
      break;
 8002ada:	e0a3      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fa78 	bl	8002fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6999      	ldr	r1, [r3, #24]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	021a      	lsls	r2, r3, #8
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	619a      	str	r2, [r3, #24]
      break;
 8002b1c:	e082      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 facf 	bl	80030c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0208 	orr.w	r2, r2, #8
 8002b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0204 	bic.w	r2, r2, #4
 8002b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69d9      	ldr	r1, [r3, #28]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
      break;
 8002b5c:	e062      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fb25 	bl	80031b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69d9      	ldr	r1, [r3, #28]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	021a      	lsls	r2, r3, #8
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	61da      	str	r2, [r3, #28]
      break;
 8002b9e:	e041      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fb5c 	bl	8003264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bde:	e021      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fb8e 	bl	8003308 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	021a      	lsls	r2, r3, #8
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c20:	e000      	b.n	8002c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002c22:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop

08002c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_ConfigClockSource+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0a6      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x166>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_TIM_ConfigClockSource+0x170>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d067      	beq.n	8002d60 <HAL_TIM_ConfigClockSource+0x120>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d80b      	bhi.n	8002cac <HAL_TIM_ConfigClockSource+0x6c>
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d073      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x140>
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d802      	bhi.n	8002ca2 <HAL_TIM_ConfigClockSource+0x62>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d06f      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ca0:	e078      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d06c      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x140>
 8002ca6:	2b30      	cmp	r3, #48	; 0x30
 8002ca8:	d06a      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002caa:	e073      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d00d      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x8c>
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	d804      	bhi.n	8002cbe <HAL_TIM_ConfigClockSource+0x7e>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d033      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0xe0>
 8002cb8:	2b60      	cmp	r3, #96	; 0x60
 8002cba:	d041      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cbc:	e06a      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc2:	d066      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x152>
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d017      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cca:	e063      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f000 fbe2 	bl	80034a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
      break;
 8002cf8:	e04c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f000 fbcb 	bl	80034a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1c:	609a      	str	r2, [r3, #8]
      break;
 8002d1e:	e039      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f000 fb3f 	bl	80033b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2150      	movs	r1, #80	; 0x50
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fb98 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e029      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f000 fb5e 	bl	800340e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2160      	movs	r1, #96	; 0x60
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fb88 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002d5e:	e019      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f000 fb1f 	bl	80033b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fb78 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002d7e:	e009      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f000 fb6f 	bl	800346e <TIM_ITRx_SetConfig>
      break;
 8002d90:	e000      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	fffeff88 	.word	0xfffeff88

08002db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd2:	d00f      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ecc <TIM_Base_SetConfig+0x118>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3c      	ldr	r2, [pc, #240]	; (8002ed0 <TIM_Base_SetConfig+0x11c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <TIM_Base_SetConfig+0x120>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d003      	beq.n	8002df4 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <TIM_Base_SetConfig+0x124>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d108      	bne.n	8002e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02b      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d027      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <TIM_Base_SetConfig+0x118>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d023      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2b      	ldr	r2, [pc, #172]	; (8002ed0 <TIM_Base_SetConfig+0x11c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01f      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <TIM_Base_SetConfig+0x120>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01b      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <TIM_Base_SetConfig+0x124>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d017      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a28      	ldr	r2, [pc, #160]	; (8002edc <TIM_Base_SetConfig+0x128>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <TIM_Base_SetConfig+0x12c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00f      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <TIM_Base_SetConfig+0x130>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a25      	ldr	r2, [pc, #148]	; (8002ee8 <TIM_Base_SetConfig+0x134>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a24      	ldr	r2, [pc, #144]	; (8002eec <TIM_Base_SetConfig+0x138>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <TIM_Base_SetConfig+0x13c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <TIM_Base_SetConfig+0x114>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0xf8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	; (8002ed8 <TIM_Base_SetConfig+0x124>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	40001800 	.word	0x40001800
 8002eec:	40001c00 	.word	0x40001c00
 8002ef0:	40002000 	.word	0x40002000

08002ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <TIM_OC1_SetConfig+0xd8>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <TIM_OC1_SetConfig+0xdc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_OC1_SetConfig+0x64>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <TIM_OC1_SetConfig+0xe0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10c      	bne.n	8002f72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0308 	bic.w	r3, r3, #8
 8002f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <TIM_OC1_SetConfig+0xdc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <TIM_OC1_SetConfig+0x8e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <TIM_OC1_SetConfig+0xe0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d111      	bne.n	8002fa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	621a      	str	r2, [r3, #32]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	fffeff8f 	.word	0xfffeff8f
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0210 	bic.w	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <TIM_OC2_SetConfig+0xe4>)
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0320 	bic.w	r3, r3, #32
 8003022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <TIM_OC2_SetConfig+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <TIM_OC2_SetConfig+0x68>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <TIM_OC2_SetConfig+0xec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10d      	bne.n	800305c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <TIM_OC2_SetConfig+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_OC2_SetConfig+0x94>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <TIM_OC2_SetConfig+0xec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d113      	bne.n	8003094 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	feff8fff 	.word	0xfeff8fff
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <TIM_OC3_SetConfig+0xe0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <TIM_OC3_SetConfig+0xe4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_OC3_SetConfig+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <TIM_OC3_SetConfig+0xe8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10d      	bne.n	800314a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <TIM_OC3_SetConfig+0xe4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_OC3_SetConfig+0x92>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <TIM_OC3_SetConfig+0xe8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d113      	bne.n	8003182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	fffeff8f 	.word	0xfffeff8f
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400

080031b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <TIM_OC4_SetConfig+0xa4>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	031b      	lsls	r3, r3, #12
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <TIM_OC4_SetConfig+0xa8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC4_SetConfig+0x68>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <TIM_OC4_SetConfig+0xac>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d109      	bne.n	8003230 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	feff8fff 	.word	0xfeff8fff
 800325c:	40010000 	.word	0x40010000
 8003260:	40010400 	.word	0x40010400

08003264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <TIM_OC5_SetConfig+0x98>)
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a12      	ldr	r2, [pc, #72]	; (8003300 <TIM_OC5_SetConfig+0x9c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_OC5_SetConfig+0x5e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a11      	ldr	r2, [pc, #68]	; (8003304 <TIM_OC5_SetConfig+0xa0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d109      	bne.n	80032d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	fffeff8f 	.word	0xfffeff8f
 8003300:	40010000 	.word	0x40010000
 8003304:	40010400 	.word	0x40010400

08003308 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <TIM_OC6_SetConfig+0x9c>)
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800334a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <TIM_OC6_SetConfig+0xa0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_OC6_SetConfig+0x60>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <TIM_OC6_SetConfig+0xa4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d109      	bne.n	800337c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	029b      	lsls	r3, r3, #10
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	feff8fff 	.word	0xfeff8fff
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 030a 	bic.w	r3, r3, #10
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800340e:	b480      	push	{r7}
 8003410:	b087      	sub	sp, #28
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0210 	bic.w	r2, r3, #16
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	031b      	lsls	r3, r3, #12
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	f043 0307 	orr.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	021a      	lsls	r2, r3, #8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e045      	b.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	4313      	orrs	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40010000 	.word	0x40010000
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e065      	b.n	8003684 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d115      	bne.n	8003672 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	051b      	lsls	r3, r3, #20
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40010000 	.word	0x40010000
 8003694:	40010400 	.word	0x40010400

08003698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e040      	b.n	800372c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f002 f948 	bl	8005950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa9a 	bl	8003c10 <UART_SetConfig>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e022      	b.n	800372c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fd32 	bl	8004158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fdb9 	bl	800429c <UART_CheckIdleState>
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	2b20      	cmp	r3, #32
 800374a:	d17f      	bne.n	800384c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x24>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e078      	b.n	800384e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UART_Transmit+0x36>
 8003766:	2302      	movs	r3, #2
 8003768:	e071      	b.n	800384e <HAL_UART_Transmit+0x11a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800377e:	f7fc ff2d 	bl	80005dc <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d108      	bne.n	80037b0 <HAL_UART_Transmit+0x7c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	e003      	b.n	80037b8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037b8:	e02c      	b.n	8003814 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2180      	movs	r1, #128	; 0x80
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fd98 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e03c      	b.n	800384e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	3302      	adds	r3, #2
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	e007      	b.n	8003802 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	3301      	adds	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1cc      	bne.n	80037ba <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	2140      	movs	r1, #64	; 0x40
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fd65 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e009      	b.n	800384e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386a:	2b20      	cmp	r3, #32
 800386c:	f040 808a 	bne.w	8003984 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_UART_Receive_IT+0x24>
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e082      	b.n	8003986 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_UART_Receive_IT+0x36>
 800388a:	2302      	movs	r3, #2
 800388c:	e07b      	b.n	8003986 <HAL_UART_Receive_IT+0x12e>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	d10e      	bne.n	80038da <HAL_UART_Receive_IT+0x82>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_UART_Receive_IT+0x78>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80038ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038ce:	e02d      	b.n	800392c <HAL_UART_Receive_IT+0xd4>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	22ff      	movs	r2, #255	; 0xff
 80038d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038d8:	e028      	b.n	800392c <HAL_UART_Receive_IT+0xd4>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <HAL_UART_Receive_IT+0xa6>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <HAL_UART_Receive_IT+0x9c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	22ff      	movs	r2, #255	; 0xff
 80038ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038f2:	e01b      	b.n	800392c <HAL_UART_Receive_IT+0xd4>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	227f      	movs	r2, #127	; 0x7f
 80038f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038fc:	e016      	b.n	800392c <HAL_UART_Receive_IT+0xd4>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003906:	d10d      	bne.n	8003924 <HAL_UART_Receive_IT+0xcc>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_UART_Receive_IT+0xc2>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	227f      	movs	r2, #127	; 0x7f
 8003914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003918:	e008      	b.n	800392c <HAL_UART_Receive_IT+0xd4>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	223f      	movs	r2, #63	; 0x3f
 800391e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003922:	e003      	b.n	800392c <HAL_UART_Receive_IT+0xd4>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2222      	movs	r2, #34	; 0x22
 8003936:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d107      	bne.n	8003962 <HAL_UART_Receive_IT+0x10a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_UART_Receive_IT+0x13c>)
 800395e:	661a      	str	r2, [r3, #96]	; 0x60
 8003960:	e002      	b.n	8003968 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_UART_Receive_IT+0x140>)
 8003966:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800397e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	080044cf 	.word	0x080044cf
 8003998:	08004429 	.word	0x08004429

0800399c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d113      	bne.n	80039f2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80eb 	beq.w	8003bbe <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      }
      return;
 80039f0:	e0e5      	b.n	8003bbe <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80c0 	beq.w	8003b7a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80b5 	beq.w	8003b7a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <HAL_UART_IRQHandler+0x9c>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <HAL_UART_IRQHandler+0xc4>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2202      	movs	r2, #2
 8003a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <HAL_UART_IRQHandler+0xec>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a80:	f043 0202 	orr.w	r2, r3, #2
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab2:	f043 0208 	orr.w	r2, r3, #8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d07f      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d004      	beq.n	8003b04 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d031      	beq.n	8003b68 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fc40 	bl	800438a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d123      	bne.n	8003b60 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b26:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_UART_IRQHandler+0x234>)
 8003b36:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fc fe8c 	bl	800085a <HAL_DMA_Abort_IT>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b52:	4610      	mov	r0, r2
 8003b54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b56:	e00e      	b.n	8003b76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f84f 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5e:	e00a      	b.n	8003b76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f84b 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b66:	e006      	b.n	8003b76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f847 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003b74:	e025      	b.n	8003bc2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b76:	bf00      	nop
    return;
 8003b78:	e023      	b.n	8003bc2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d017      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
    }
    return;
 8003b9e:	e012      	b.n	8003bc6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x22c>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fc1e 	bl	80043f6 <UART_EndTransmit_IT>
    return;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <HAL_UART_IRQHandler+0x22c>
      return;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <HAL_UART_IRQHandler+0x22c>
    return;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <HAL_UART_IRQHandler+0x22c>
    return;
 8003bc6:	bf00      	nop
  }

}
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	080043cb 	.word	0x080043cb

08003bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4bb1      	ldr	r3, [pc, #708]	; (8003f04 <UART_SetConfig+0x2f4>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a9f      	ldr	r2, [pc, #636]	; (8003f08 <UART_SetConfig+0x2f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d121      	bne.n	8003cd4 <UART_SetConfig+0xc4>
 8003c90:	4b9e      	ldr	r3, [pc, #632]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d816      	bhi.n	8003ccc <UART_SetConfig+0xbc>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x94>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc1 	.word	0x08003cc1
 8003cac:	08003cbb 	.word	0x08003cbb
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e151      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e14e      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e14b      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e148      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	bf00      	nop
 8003cd2:	e144      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a8d      	ldr	r2, [pc, #564]	; (8003f10 <UART_SetConfig+0x300>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d134      	bne.n	8003d48 <UART_SetConfig+0x138>
 8003cde:	4b8b      	ldr	r3, [pc, #556]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d829      	bhi.n	8003d40 <UART_SetConfig+0x130>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <UART_SetConfig+0xe4>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d41 	.word	0x08003d41
 8003cfc:	08003d41 	.word	0x08003d41
 8003d00:	08003d41 	.word	0x08003d41
 8003d04:	08003d35 	.word	0x08003d35
 8003d08:	08003d41 	.word	0x08003d41
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d41 	.word	0x08003d41
 8003d14:	08003d2f 	.word	0x08003d2f
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d41 	.word	0x08003d41
 8003d24:	08003d3b 	.word	0x08003d3b
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e117      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e114      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d34:	2304      	movs	r3, #4
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e111      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e10e      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d40:	2310      	movs	r3, #16
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	bf00      	nop
 8003d46:	e10a      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a71      	ldr	r2, [pc, #452]	; (8003f14 <UART_SetConfig+0x304>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d120      	bne.n	8003d94 <UART_SetConfig+0x184>
 8003d52:	4b6e      	ldr	r3, [pc, #440]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d00f      	beq.n	8003d80 <UART_SetConfig+0x170>
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d802      	bhi.n	8003d6a <UART_SetConfig+0x15a>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <UART_SetConfig+0x164>
 8003d68:	e010      	b.n	8003d8c <UART_SetConfig+0x17c>
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d005      	beq.n	8003d7a <UART_SetConfig+0x16a>
 8003d6e:	2b30      	cmp	r3, #48	; 0x30
 8003d70:	d009      	beq.n	8003d86 <UART_SetConfig+0x176>
 8003d72:	e00b      	b.n	8003d8c <UART_SetConfig+0x17c>
 8003d74:	2300      	movs	r3, #0
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e0f1      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e0ee      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d80:	2304      	movs	r3, #4
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e0eb      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d86:	2308      	movs	r3, #8
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e0e8      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	bf00      	nop
 8003d92:	e0e4      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a5f      	ldr	r2, [pc, #380]	; (8003f18 <UART_SetConfig+0x308>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d120      	bne.n	8003de0 <UART_SetConfig+0x1d0>
 8003d9e:	4b5b      	ldr	r3, [pc, #364]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d00f      	beq.n	8003dcc <UART_SetConfig+0x1bc>
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d802      	bhi.n	8003db6 <UART_SetConfig+0x1a6>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <UART_SetConfig+0x1b0>
 8003db4:	e010      	b.n	8003dd8 <UART_SetConfig+0x1c8>
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d005      	beq.n	8003dc6 <UART_SetConfig+0x1b6>
 8003dba:	2bc0      	cmp	r3, #192	; 0xc0
 8003dbc:	d009      	beq.n	8003dd2 <UART_SetConfig+0x1c2>
 8003dbe:	e00b      	b.n	8003dd8 <UART_SetConfig+0x1c8>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e0cb      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e0c8      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e0c5      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e0c2      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	bf00      	nop
 8003dde:	e0be      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <UART_SetConfig+0x30c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d124      	bne.n	8003e34 <UART_SetConfig+0x224>
 8003dea:	4b48      	ldr	r3, [pc, #288]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df8:	d012      	beq.n	8003e20 <UART_SetConfig+0x210>
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d802      	bhi.n	8003e06 <UART_SetConfig+0x1f6>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <UART_SetConfig+0x204>
 8003e04:	e012      	b.n	8003e2c <UART_SetConfig+0x21c>
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	d006      	beq.n	8003e1a <UART_SetConfig+0x20a>
 8003e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e10:	d009      	beq.n	8003e26 <UART_SetConfig+0x216>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x21c>
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e0a1      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e09e      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e20:	2304      	movs	r3, #4
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e09b      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e26:	2308      	movs	r3, #8
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e098      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	bf00      	nop
 8003e32:	e094      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a39      	ldr	r2, [pc, #228]	; (8003f20 <UART_SetConfig+0x310>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d124      	bne.n	8003e88 <UART_SetConfig+0x278>
 8003e3e:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	d012      	beq.n	8003e74 <UART_SetConfig+0x264>
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d802      	bhi.n	8003e5a <UART_SetConfig+0x24a>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <UART_SetConfig+0x258>
 8003e58:	e012      	b.n	8003e80 <UART_SetConfig+0x270>
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5e:	d006      	beq.n	8003e6e <UART_SetConfig+0x25e>
 8003e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e64:	d009      	beq.n	8003e7a <UART_SetConfig+0x26a>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x270>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e077      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e074      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e071      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e06e      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	bf00      	nop
 8003e86:	e06a      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <UART_SetConfig+0x314>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d124      	bne.n	8003edc <UART_SetConfig+0x2cc>
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d012      	beq.n	8003ec8 <UART_SetConfig+0x2b8>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d802      	bhi.n	8003eae <UART_SetConfig+0x29e>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <UART_SetConfig+0x2ac>
 8003eac:	e012      	b.n	8003ed4 <UART_SetConfig+0x2c4>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	d006      	beq.n	8003ec2 <UART_SetConfig+0x2b2>
 8003eb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eb8:	d009      	beq.n	8003ece <UART_SetConfig+0x2be>
 8003eba:	e00b      	b.n	8003ed4 <UART_SetConfig+0x2c4>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e04d      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e04a      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e047      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e044      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	bf00      	nop
 8003eda:	e040      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <UART_SetConfig+0x318>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d139      	bne.n	8003f5a <UART_SetConfig+0x34a>
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <UART_SetConfig+0x2fc>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef4:	d027      	beq.n	8003f46 <UART_SetConfig+0x336>
 8003ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efa:	d817      	bhi.n	8003f2c <UART_SetConfig+0x31c>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01c      	beq.n	8003f3a <UART_SetConfig+0x32a>
 8003f00:	e027      	b.n	8003f52 <UART_SetConfig+0x342>
 8003f02:	bf00      	nop
 8003f04:	efff69f3 	.word	0xefff69f3
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40004400 	.word	0x40004400
 8003f14:	40004800 	.word	0x40004800
 8003f18:	40004c00 	.word	0x40004c00
 8003f1c:	40005000 	.word	0x40005000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	40007800 	.word	0x40007800
 8003f28:	40007c00 	.word	0x40007c00
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	d006      	beq.n	8003f40 <UART_SetConfig+0x330>
 8003f32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f36:	d009      	beq.n	8003f4c <UART_SetConfig+0x33c>
 8003f38:	e00b      	b.n	8003f52 <UART_SetConfig+0x342>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e00e      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003f40:	2302      	movs	r3, #2
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e00b      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003f46:	2304      	movs	r3, #4
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e008      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e005      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003f52:	2310      	movs	r3, #16
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	bf00      	nop
 8003f58:	e001      	b.n	8003f5e <UART_SetConfig+0x34e>
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d17c      	bne.n	8004062 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d859      	bhi.n	8004022 <UART_SetConfig+0x412>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x364>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fb7 	.word	0x08003fb7
 8003f7c:	08003fd5 	.word	0x08003fd5
 8003f80:	08004023 	.word	0x08004023
 8003f84:	08003fed 	.word	0x08003fed
 8003f88:	08004023 	.word	0x08004023
 8003f8c:	08004023 	.word	0x08004023
 8003f90:	08004023 	.word	0x08004023
 8003f94:	0800400b 	.word	0x0800400b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f98:	f7fe f88c 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	005a      	lsls	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	61bb      	str	r3, [r7, #24]
        break;
 8003fb4:	e038      	b.n	8004028 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003fb6:	f7fe f891 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	005a      	lsls	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	61bb      	str	r3, [r7, #24]
        break;
 8003fd2:	e029      	b.n	8004028 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	085a      	lsrs	r2, r3, #1
 8003fda:	4b5d      	ldr	r3, [pc, #372]	; (8004150 <UART_SetConfig+0x540>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6852      	ldr	r2, [r2, #4]
 8003fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	61bb      	str	r3, [r7, #24]
        break;
 8003fea:	e01d      	b.n	8004028 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003fec:	f7fd ff7e 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	005a      	lsls	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e00e      	b.n	8004028 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	61bb      	str	r3, [r7, #24]
        break;
 8004020:	e002      	b.n	8004028 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
        break;
 8004026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	d916      	bls.n	800405c <UART_SetConfig+0x44c>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d212      	bcs.n	800405c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f023 030f 	bic.w	r3, r3, #15
 800403e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	b29a      	uxth	r2, r3
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	4313      	orrs	r3, r2
 8004050:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	89fa      	ldrh	r2, [r7, #14]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e06e      	b.n	800413a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
 8004060:	e06b      	b.n	800413a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004062:	7ffb      	ldrb	r3, [r7, #31]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d857      	bhi.n	8004118 <UART_SetConfig+0x508>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x460>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004095 	.word	0x08004095
 8004074:	080040b1 	.word	0x080040b1
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004119 	.word	0x08004119
 8004080:	080040e5 	.word	0x080040e5
 8004084:	08004119 	.word	0x08004119
 8004088:	08004119 	.word	0x08004119
 800408c:	08004119 	.word	0x08004119
 8004090:	08004101 	.word	0x08004101
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004094:	f7fe f80e 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	61bb      	str	r3, [r7, #24]
        break;
 80040ae:	e036      	b.n	800411e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040b0:	f7fe f814 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	61bb      	str	r3, [r7, #24]
        break;
 80040ca:	e028      	b.n	800411e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085a      	lsrs	r2, r3, #1
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <UART_SetConfig+0x544>)
 80040d4:	4413      	add	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6852      	ldr	r2, [r2, #4]
 80040da:	fbb3 f3f2 	udiv	r3, r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	61bb      	str	r3, [r7, #24]
        break;
 80040e2:	e01c      	b.n	800411e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80040e4:	f7fd ff02 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	441a      	add	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	61bb      	str	r3, [r7, #24]
        break;
 80040fe:	e00e      	b.n	800411e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	61bb      	str	r3, [r7, #24]
        break;
 8004116:	e002      	b.n	800411e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
        break;
 800411c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b0f      	cmp	r3, #15
 8004122:	d908      	bls.n	8004136 <UART_SetConfig+0x526>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d204      	bcs.n	8004136 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	e001      	b.n	800413a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	01e84800 	.word	0x01e84800
 8004154:	00f42400 	.word	0x00f42400

08004158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01a      	beq.n	800426e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d10a      	bne.n	800426e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042aa:	f7fc f997 	bl	80005dc <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d10e      	bne.n	80042dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f814 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e00a      	b.n	80042f2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	e02a      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004312:	d026      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fc f962 	bl	80005dc <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <UART_WaitOnFlagUntilTimeout+0x30>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11b      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004338:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00f      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	429a      	cmp	r2, r3
 800437e:	d0c5      	beq.n	800430c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fc07 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fbda 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004436:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443c:	2b22      	cmp	r3, #34	; 0x22
 800443e:	d13a      	bne.n	80044b6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004448:	89bb      	ldrh	r3, [r7, #12]
 800444a:	b2d9      	uxtb	r1, r3
 800444c:	89fb      	ldrh	r3, [r7, #14]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	400a      	ands	r2, r1
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d121      	bne.n	80044c6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004490:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fb9a 	bl	8003be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044b4:	e007      	b.n	80044c6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0208 	orr.w	r2, r2, #8
 80044c4:	619a      	str	r2, [r3, #24]
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	d13a      	bne.n	800455c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80044f4:	89ba      	ldrh	r2, [r7, #12]
 80044f6:	89fb      	ldrh	r3, [r7, #14]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d121      	bne.n	800456c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004536:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fb47 	bl	8003be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800455a:	e007      	b.n	800456c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0208 	orr.w	r2, r2, #8
 800456a:	619a      	str	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004574:	b084      	sub	sp, #16
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	f107 001c 	add.w	r0, r7, #28
 8004582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2b01      	cmp	r3, #1
 800458a:	d120      	bne.n	80045ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <USB_CoreInit+0xac>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa60 	bl	8004a88 <USB_CoreReset>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e010      	b.n	80045f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa54 	bl	8004a88 <USB_CoreReset>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10b      	bne.n	800460e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f043 0206 	orr.w	r2, r3, #6
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800461a:	b004      	add	sp, #16
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	ffbdffbf 	.word	0xffbdffbf

08004624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 0201 	bic.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e00b      	b.n	800468a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	e001      	b.n	800468a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e003      	b.n	8004692 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800468a:	2032      	movs	r0, #50	; 0x32
 800468c:	f7fb ffb2 	bl	80005f4 <HAL_Delay>

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800469c:	b084      	sub	sp, #16
 800469e:	b580      	push	{r7, lr}
 80046a0:	b086      	sub	sp, #24
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e009      	b.n	80046d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3340      	adds	r3, #64	; 0x40
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	2200      	movs	r2, #0
 80046c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3301      	adds	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b0e      	cmp	r3, #14
 80046d4:	d9f2      	bls.n	80046bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d112      	bne.n	8004702 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e005      	b.n	800470e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004714:	461a      	mov	r2, r3
 8004716:	2300      	movs	r3, #0
 8004718:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004720:	4619      	mov	r1, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	461a      	mov	r2, r3
 800472a:	680b      	ldr	r3, [r1, #0]
 800472c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10c      	bne.n	800474e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800473a:	2100      	movs	r1, #0
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f971 	bl	8004a24 <USB_SetDevSpeed>
 8004742:	e018      	b.n	8004776 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004744:	2101      	movs	r1, #1
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f96c 	bl	8004a24 <USB_SetDevSpeed>
 800474c:	e013      	b.n	8004776 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b03      	cmp	r3, #3
 8004752:	d10c      	bne.n	800476e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800475a:	2100      	movs	r1, #0
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f961 	bl	8004a24 <USB_SetDevSpeed>
 8004762:	e008      	b.n	8004776 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004764:	2101      	movs	r1, #1
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f95c 	bl	8004a24 <USB_SetDevSpeed>
 800476c:	e003      	b.n	8004776 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800476e:	2103      	movs	r1, #3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f957 	bl	8004a24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004776:	2110      	movs	r1, #16
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f90b 	bl	8004994 <USB_FlushTxFifo>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f929 	bl	80049e0 <USB_FlushRxFifo>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e043      	b.n	800484a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d8:	d118      	bne.n	800480c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	461a      	mov	r2, r3
 80047ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e013      	b.n	800481e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e008      	b.n	800481e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	461a      	mov	r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	461a      	mov	r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	461a      	mov	r2, r3
 800483e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004842:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	3301      	adds	r3, #1
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3b7      	bcc.n	80047c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e043      	b.n	80048e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800486e:	d118      	bne.n	80048a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	461a      	mov	r2, r3
 8004884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e013      	b.n	80048b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	461a      	mov	r2, r3
 800489a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e008      	b.n	80048b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ae:	461a      	mov	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	461a      	mov	r2, r3
 80048c2:	2300      	movs	r3, #0
 80048c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	461a      	mov	r2, r3
 80048d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3301      	adds	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d3b7      	bcc.n	8004858 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fa:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d110      	bne.n	8004924 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	461a      	mov	r2, r3
 800490a:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <USB_DevInit+0x2e8>)
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491c:	4619      	mov	r1, r3
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <USB_DevInit+0x2ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004930:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f043 0210 	orr.w	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <USB_DevInit+0x2f0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f043 0208 	orr.w	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	4b08      	ldr	r3, [pc, #32]	; (8004990 <USB_DevInit+0x2f4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004980:	b004      	add	sp, #16
 8004982:	4770      	bx	lr
 8004984:	00800100 	.word	0x00800100
 8004988:	00010003 	.word	0x00010003
 800498c:	803c3800 	.word	0x803c3800
 8004990:	40000004 	.word	0x40000004

08004994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3301      	adds	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <USB_FlushTxFifo+0x48>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d0f0      	beq.n	80049ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	00030d40 	.word	0x00030d40

080049e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2210      	movs	r2, #16
 80049f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <USB_FlushRxFifo+0x40>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d0f0      	beq.n	80049f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	00030d40 	.word	0x00030d40

08004a24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004a76:	2003      	movs	r0, #3
 8004a78:	f7fb fdbc 	bl	80005f4 <HAL_Delay>

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <USB_CoreReset+0x64>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e01b      	b.n	8004ade <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	daf2      	bge.n	8004a94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a09      	ldr	r2, [pc, #36]	; (8004aec <USB_CoreReset+0x64>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d0f0      	beq.n	8004abe <USB_CoreReset+0x36>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	00030d40 	.word	0x00030d40

08004af0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <MX_ETH_Init+0x64>)
 8004af8:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <MX_ETH_Init+0x68>)
 8004afa:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <MX_ETH_Init+0x64>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <MX_ETH_Init+0x64>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8004b10:	23e1      	movs	r3, #225	; 0xe1
 8004b12:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8004b14:	2300      	movs	r3, #0
 8004b16:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8004b20:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <MX_ETH_Init+0x64>)
 8004b22:	463b      	mov	r3, r7
 8004b24:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <MX_ETH_Init+0x64>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <MX_ETH_Init+0x64>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <MX_ETH_Init+0x64>)
 8004b34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b38:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8004b3a:	4806      	ldr	r0, [pc, #24]	; (8004b54 <MX_ETH_Init+0x64>)
 8004b3c:	f7fb feb0 	bl	80008a0 <HAL_ETH_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8004b46:	f000 fb17 	bl	8005178 <Error_Handler>
  }

}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000038 	.word	0x20000038
 8004b58:	40028000 	.word	0x40028000

08004b5c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08e      	sub	sp, #56	; 0x38
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a4e      	ldr	r2, [pc, #312]	; (8004cb4 <HAL_ETH_MspInit+0x158>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f040 8096 	bne.w	8004cac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b80:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	4a4c      	ldr	r2, [pc, #304]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8c:	4b4a      	ldr	r3, [pc, #296]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4a46      	ldr	r2, [pc, #280]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba4:	4b44      	ldr	r3, [pc, #272]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4b41      	ldr	r3, [pc, #260]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bba:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	4a3a      	ldr	r2, [pc, #232]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bce:	f043 0304 	orr.w	r3, r3, #4
 8004bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd4:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be0:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4a34      	ldr	r2, [pc, #208]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6313      	str	r3, [r2, #48]	; 0x30
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004bfe:	f043 0302 	orr.w	r3, r3, #2
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1c:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_ETH_MspInit+0x15c>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c28:	2332      	movs	r3, #50	; 0x32
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c38:	230b      	movs	r3, #11
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	4619      	mov	r1, r3
 8004c42:	481e      	ldr	r0, [pc, #120]	; (8004cbc <HAL_ETH_MspInit+0x160>)
 8004c44:	f7fc fa98 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c48:	2386      	movs	r3, #134	; 0x86
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c54:	2303      	movs	r3, #3
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c58:	230b      	movs	r3, #11
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c60:	4619      	mov	r1, r3
 8004c62:	4817      	ldr	r0, [pc, #92]	; (8004cc0 <HAL_ETH_MspInit+0x164>)
 8004c64:	f7fc fa88 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c76:	2303      	movs	r3, #3
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c7a:	230b      	movs	r3, #11
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c82:	4619      	mov	r1, r3
 8004c84:	480f      	ldr	r0, [pc, #60]	; (8004cc4 <HAL_ETH_MspInit+0x168>)
 8004c86:	f7fc fa77 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c9c:	230b      	movs	r3, #11
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4808      	ldr	r0, [pc, #32]	; (8004cc8 <HAL_ETH_MspInit+0x16c>)
 8004ca8:	f7fc fa66 	bl	8001178 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004cac:	bf00      	nop
 8004cae:	3738      	adds	r7, #56	; 0x38
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40028000 	.word	0x40028000
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40020800 	.word	0x40020800
 8004cc0:	40020000 	.word	0x40020000
 8004cc4:	40020400 	.word	0x40020400
 8004cc8:	40021800 	.word	0x40021800

08004ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	; 0x30
 8004cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd2:	f107 031c 	add.w	r3, r7, #28
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	4a4b      	ldr	r2, [pc, #300]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	6313      	str	r3, [r2, #48]	; 0x30
 8004cee:	4b49      	ldr	r3, [pc, #292]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cfa:	4b46      	ldr	r3, [pc, #280]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4a45      	ldr	r2, [pc, #276]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	6313      	str	r3, [r2, #48]	; 0x30
 8004d06:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d12:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	4a3f      	ldr	r2, [pc, #252]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d2a:	4b3a      	ldr	r3, [pc, #232]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a39      	ldr	r2, [pc, #228]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d42:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	4a33      	ldr	r2, [pc, #204]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d60:	f043 0308 	orr.w	r3, r3, #8
 8004d64:	6313      	str	r3, [r2, #48]	; 0x30
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7e:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <MX_GPIO_Init+0x148>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004d90:	4821      	ldr	r0, [pc, #132]	; (8004e18 <MX_GPIO_Init+0x14c>)
 8004d92:	f7fc fb9b 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	4820      	ldr	r0, [pc, #128]	; (8004e1c <MX_GPIO_Init+0x150>)
 8004d9c:	f7fc fb96 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <MX_GPIO_Init+0x154>)
 8004da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004dae:	f107 031c 	add.w	r3, r7, #28
 8004db2:	4619      	mov	r1, r3
 8004db4:	481b      	ldr	r0, [pc, #108]	; (8004e24 <MX_GPIO_Init+0x158>)
 8004db6:	f7fc f9df 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004dba:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8004dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dcc:	f107 031c 	add.w	r3, r7, #28
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4811      	ldr	r0, [pc, #68]	; (8004e18 <MX_GPIO_Init+0x14c>)
 8004dd4:	f7fc f9d0 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004de8:	f107 031c 	add.w	r3, r7, #28
 8004dec:	4619      	mov	r1, r3
 8004dee:	480b      	ldr	r0, [pc, #44]	; (8004e1c <MX_GPIO_Init+0x150>)
 8004df0:	f7fc f9c2 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e00:	f107 031c 	add.w	r3, r7, #28
 8004e04:	4619      	mov	r1, r3
 8004e06:	4805      	ldr	r0, [pc, #20]	; (8004e1c <MX_GPIO_Init+0x150>)
 8004e08:	f7fc f9b6 	bl	8001178 <HAL_GPIO_Init>

}
 8004e0c:	bf00      	nop
 8004e0e:	3730      	adds	r7, #48	; 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40020400 	.word	0x40020400
 8004e1c:	40021800 	.word	0x40021800
 8004e20:	10110000 	.word	0x10110000
 8004e24:	40020800 	.word	0x40020800

08004e28 <InitConsola>:
//Funcion del standard que inicia el huart3
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);
//Nueva consola de la estructura creada en ioc.h
sArchivo consola;

void InitConsola() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	//Poniendo un idetificador a la consola inicializada
	consola.id = 1;
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <InitConsola+0x34>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
	//Iniciando las posiciones del buffer circular en 0
	consola.posIni = 0;
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <InitConsola+0x34>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	consola.posFin = 0;
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <InitConsola+0x34>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	//Archivo de donde se va leer y escribir indicado como el HUART3
	consola.harchivo = (void*)&huart3;
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <InitConsola+0x34>)
 8004e44:	4a06      	ldr	r2, [pc, #24]	; (8004e60 <InitConsola+0x38>)
 8004e46:	605a      	str	r2, [r3, #4]
	//Iniciando el huart3 mediante la funcion proporcionada por el standard HAL
	HAL_UART_Init(&huart3);
 8004e48:	4805      	ldr	r0, [pc, #20]	; (8004e60 <InitConsola+0x38>)
 8004e4a:	f7fe fc25 	bl	8003698 <HAL_UART_Init>
	//Indica que la informacion se va recibir en buffer con un tamaño de 1.
	//Se genera una interrupcion por cada caracter que llegue al buffer.
	HAL_UART_Receive_IT(&huart3, consola.buffer, 1);
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4904      	ldr	r1, [pc, #16]	; (8004e64 <InitConsola+0x3c>)
 8004e52:	4803      	ldr	r0, [pc, #12]	; (8004e60 <InitConsola+0x38>)
 8004e54:	f7fe fd00 	bl	8003858 <HAL_UART_Receive_IT>

}
 8004e58:	bf00      	nop
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000080 	.word	0x20000080
 8004e60:	20000578 	.word	0x20000578
 8004e64:	20000088 	.word	0x20000088

08004e68 <ServicioEscribir>:
		b[i]=consola.buffer[(i+consola.posIni)%1024];
	//Se retorna la cantidad de caracteres leidos.
    return t;
}

int ServicioEscribir(int a,char* b,int t) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
	//Archivo donde se va escribir, es decir, el archivo del huart3
	UART_HandleTypeDef* htmp = (UART_HandleTypeDef*)consola.harchivo;
 8004e74:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <ServicioEscribir+0x2c>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	617b      	str	r3, [r7, #20]
	//Funcion HAL que me permite escribir en el archivo de un HUART
	HAL_UART_Transmit(htmp, b,t, 1000);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	6978      	ldr	r0, [r7, #20]
 8004e86:	f7fe fc55 	bl	8003734 <HAL_UART_Transmit>
	//Retorna el numero de caracteres que se escribieron
	return t;
 8004e8a:	687b      	ldr	r3, [r7, #4]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000080 	.word	0x20000080

08004e98 <Escribir>:
	__asm("mov r3,5;svc 0");
	//Retorna la cantidad de caracteres leidos
	return r;
}

int Escribir(int a,char* b,int t) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
	//Guarda el valor de r0 (parametro a) en la variable r
	register int r asm("r0");
	//Ejecuta codigo ensamblador en C.
	//mov r3, 2 mueve un 2 a r3, que indica el servicio a consumir
	//svc 0 indica que se quiere realizar un interrupcion por software, lo cual es atendida por SVC_Handler
	__asm("mov r3,6;svc 0");
 8004ea4:	f04f 0306 	mov.w	r3, #6
 8004ea8:	df00      	svc	0
	//Retorna la cantidad de caracteres escritos
	return r;
 8004eaa:	4603      	mov	r3, r0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USART3_IRQHandler>:
	//Servicio 5 es el de parar el PWM
	__asm("mov r3,5;svc 0");
}

//Manejador de interrupcion del UART3
void USART3_IRQHandler(void) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ebc:	480e      	ldr	r0, [pc, #56]	; (8004ef8 <USART3_IRQHandler+0x40>)
 8004ebe:	f7fe fd6d 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //Incrementando la posicion de escritura del buffer circular
  consola.posFin++;
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <USART3_IRQHandler+0x44>)
 8004ec4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <USART3_IRQHandler+0x44>)
 8004ecc:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
  //Indicando donde poner el caracter que llego por el puerto serial tras la interrupcion
  HAL_UART_Receive_IT(&huart3,&consola.buffer[consola.posFin%1024],1);
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <USART3_IRQHandler+0x44>)
 8004ed2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004ed6:	425a      	negs	r2, r3
 8004ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004edc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ee0:	bf58      	it	pl
 8004ee2:	4253      	negpl	r3, r2
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <USART3_IRQHandler+0x44>)
 8004ee8:	4413      	add	r3, r2
 8004eea:	2201      	movs	r2, #1
 8004eec:	4619      	mov	r1, r3
 8004eee:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <USART3_IRQHandler+0x40>)
 8004ef0:	f7fe fcb2 	bl	8003858 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8004ef4:	bf00      	nop
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000578 	.word	0x20000578
 8004efc:	20000080 	.word	0x20000080

08004f00 <__NVIC_SetPriority>:
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	6039      	str	r1, [r7, #0]
 8004f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db0a      	blt.n	8004f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	490c      	ldr	r1, [pc, #48]	; (8004f4c <__NVIC_SetPriority+0x4c>)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	0112      	lsls	r2, r2, #4
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	440b      	add	r3, r1
 8004f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f28:	e00a      	b.n	8004f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4908      	ldr	r1, [pc, #32]	; (8004f50 <__NVIC_SetPriority+0x50>)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	3b04      	subs	r3, #4
 8004f38:	0112      	lsls	r2, r2, #4
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	761a      	strb	r2, [r3, #24]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e100 	.word	0xe000e100
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <SysTick_Config>:
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f64:	d301      	bcc.n	8004f6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00f      	b.n	8004f8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <SysTick_Config+0x40>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f72:	210f      	movs	r1, #15
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f78:	f7ff ffc2 	bl	8004f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <SysTick_Config+0x40>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <SysTick_Config+0x40>)
 8004f84:	2207      	movs	r2, #7
 8004f86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000e010 	.word	0xe000e010

08004f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f9e:	f7fb facb 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fa2:	f000 f853 	bl	800504c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fa6:	f7ff fe91 	bl	8004ccc <MX_GPIO_Init>
  MX_ETH_Init();
 8004faa:	f7ff fda1 	bl	8004af0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004fae:	f000 fd1b 	bl	80059e8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8004fb2:	f000 fc9d 	bl	80058f0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8004fb6:	f000 fb95 	bl	80056e4 <MX_TIM1_Init>
  SysTick_Config(SystemCoreClock * 0.1);
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <main+0xa0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004fc6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8005030 <main+0x98>
 8004fca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004fd2:	ee17 0a90 	vmov	r0, s15
 8004fd6:	f7ff ffbd 	bl	8004f54 <SysTick_Config>
  InitConsola();
 8004fda:	f7ff ff25 	bl	8004e28 <InitConsola>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int child;
  sem_init(&mutex, 1);
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4816      	ldr	r0, [pc, #88]	; (800503c <main+0xa4>)
 8004fe2:	f000 f8e9 	bl	80051b8 <sem_init>
   while (1) {
     /* USER CODE END WHILE */

     /* USER CODE BEGIN 3 */
 	child = fork();
 8004fe6:	f000 f8cf 	bl	8005188 <fork>
 8004fea:	4603      	mov	r3, r0
 8004fec:	607b      	str	r3, [r7, #4]
 	if (child == 0) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10c      	bne.n	800500e <main+0x76>
 		for (;;) {
 			LD2_GPIO_Port->BSRR = LD2_Pin;
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <main+0xa8>)
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	619a      	str	r2, [r3, #24]
 			LD3_GPIO_Port->BSRR = (uint32_t)LD3_Pin << 16;
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <main+0xa8>)
 8004ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005000:	619a      	str	r2, [r3, #24]
 			//sem_wait(&mutex);
 			Escribir(1, "Proceso 2\n\r", 11);
 8005002:	220b      	movs	r2, #11
 8005004:	490f      	ldr	r1, [pc, #60]	; (8005044 <main+0xac>)
 8005006:	2001      	movs	r0, #1
 8005008:	f7ff ff46 	bl	8004e98 <Escribir>
 			LD2_GPIO_Port->BSRR = LD2_Pin;
 800500c:	e7f2      	b.n	8004ff4 <main+0x5c>
 			//sem_post(&mutex);
 		}
 	} else {
 		for (;;) {
 			LD2_GPIO_Port->BSRR = (uint32_t)LD2_Pin << 16;
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <main+0xa8>)
 8005010:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005014:	619a      	str	r2, [r3, #24]
 			LD3_GPIO_Port->BSRR = LD3_Pin;
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <main+0xa8>)
 8005018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800501c:	619a      	str	r2, [r3, #24]
 			//sem_wait(&mutex);
 			Escribir(1, "Proceso 1\n\r", 11);
 800501e:	220b      	movs	r2, #11
 8005020:	4909      	ldr	r1, [pc, #36]	; (8005048 <main+0xb0>)
 8005022:	2001      	movs	r0, #1
 8005024:	f7ff ff38 	bl	8004e98 <Escribir>
 			LD2_GPIO_Port->BSRR = (uint32_t)LD2_Pin << 16;
 8005028:	e7f1      	b.n	800500e <main+0x76>
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w
 8005030:	9999999a 	.word	0x9999999a
 8005034:	3fb99999 	.word	0x3fb99999
 8005038:	20000008 	.word	0x20000008
 800503c:	20000490 	.word	0x20000490
 8005040:	40020400 	.word	0x40020400
 8005044:	08005bc0 	.word	0x08005bc0
 8005048:	08005bcc 	.word	0x08005bcc

0800504c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b0b8      	sub	sp, #224	; 0xe0
 8005050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005052:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005056:	2234      	movs	r2, #52	; 0x34
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fd9c 	bl	8005b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005060:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005070:	f107 0308 	add.w	r3, r7, #8
 8005074:	2290      	movs	r2, #144	; 0x90
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fd8d 	bl	8005b98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800507e:	f7fc fb7b 	bl	8001778 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	4b3a      	ldr	r3, [pc, #232]	; (800516c <SystemClock_Config+0x120>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	4a39      	ldr	r2, [pc, #228]	; (800516c <SystemClock_Config+0x120>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6413      	str	r3, [r2, #64]	; 0x40
 800508e:	4b37      	ldr	r3, [pc, #220]	; (800516c <SystemClock_Config+0x120>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800509a:	4b35      	ldr	r3, [pc, #212]	; (8005170 <SystemClock_Config+0x124>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80050a2:	4a33      	ldr	r2, [pc, #204]	; (8005170 <SystemClock_Config+0x124>)
 80050a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <SystemClock_Config+0x124>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80050bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80050c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050c4:	2302      	movs	r3, #2
 80050c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80050d2:	2304      	movs	r3, #4
 80050d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80050d8:	2360      	movs	r3, #96	; 0x60
 80050da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050de:	2302      	movs	r3, #2
 80050e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80050e4:	2304      	movs	r3, #4
 80050e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc fba2 	bl	8001838 <HAL_RCC_OscConfig>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80050fa:	f000 f83d 	bl	8005178 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80050fe:	f7fc fb4b 	bl	8001798 <HAL_PWREx_EnableOverDrive>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005108:	f000 f836 	bl	8005178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800510c:	230f      	movs	r3, #15
 800510e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005112:	2302      	movs	r3, #2
 8005114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005118:	2300      	movs	r3, #0
 800511a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800511e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800512c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005130:	2103      	movs	r1, #3
 8005132:	4618      	mov	r0, r3
 8005134:	f7fc fdf2 	bl	8001d1c <HAL_RCC_ClockConfig>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800513e:	f000 f81b 	bl	8005178 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <SystemClock_Config+0x128>)
 8005144:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005146:	2300      	movs	r3, #0
 8005148:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4618      	mov	r0, r3
 8005156:	f7fc ffd5 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8005160:	f000 f80a 	bl	8005178 <Error_Handler>
  }
}
 8005164:	bf00      	nop
 8005166:	37e0      	adds	r7, #224	; 0xe0
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40023800 	.word	0x40023800
 8005170:	40007000 	.word	0x40007000
 8005174:	00200100 	.word	0x00200100

08005178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <fork>:
int users_proccess = 0;
int counter = 0;
sem_t *aux;
int* Parametros;

int fork(){
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
	asm("MOV r3, #1;SVC 1;");
 800518c:	f04f 0301 	mov.w	r3, #1
 8005190:	df01      	svc	1
	return proccess[current_proccess].id;
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <fork+0x28>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4907      	ldr	r1, [pc, #28]	; (80051b4 <fork+0x2c>)
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000028 	.word	0x20000028
 80051b4:	200004ac 	.word	0x200004ac

080051b8 <sem_init>:

void sem_init(sem_t* semaphore, uint32_t value){
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	asm("MOV r3, #2;SVC 1;");
 80051c2:	f04f 0302 	mov.w	r3, #2
 80051c6:	df01      	svc	1
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void) {
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
	register int p1 asm("r0");
	register int p2 asm("r1");
	register int p3 asm("r2");
	register int p4 asm("r3");

	switch(p4) {
 80051da:	3b01      	subs	r3, #1
 80051dc:	2b03      	cmp	r3, #3
 80051de:	f200 80da 	bhi.w	8005396 <SVC_Handler+0x1c2>
 80051e2:	a401      	add	r4, pc, #4	; (adr r4, 80051e8 <SVC_Handler+0x14>)
 80051e4:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	08005319 	.word	0x08005319
 80051f0:	0800533f 	.word	0x0800533f
 80051f4:	0800536b 	.word	0x0800536b
		case 1:
			users_proccess++;
 80051f8:	4b6d      	ldr	r3, [pc, #436]	; (80053b0 <SVC_Handler+0x1dc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	4a6c      	ldr	r2, [pc, #432]	; (80053b0 <SVC_Handler+0x1dc>)
 8005200:	6013      	str	r3, [r2, #0]
			proccess[users_proccess].id = users_proccess;
 8005202:	4b6b      	ldr	r3, [pc, #428]	; (80053b0 <SVC_Handler+0x1dc>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b6a      	ldr	r3, [pc, #424]	; (80053b0 <SVC_Handler+0x1dc>)
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	4c6a      	ldr	r4, [pc, #424]	; (80053b4 <SVC_Handler+0x1e0>)
 800520c:	4613      	mov	r3, r2
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4423      	add	r3, r4
 8005216:	6019      	str	r1, [r3, #0]
			__asm("TST lr, #4");
 8005218:	f01e 0f04 	tst.w	lr, #4
			__asm("MRS r0, MSP;");
 800521c:	f3ef 8008 	mrs	r0, MSP
			stack_pointer = (int*)p1;
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	4b64      	ldr	r3, [pc, #400]	; (80053b8 <SVC_Handler+0x1e4>)
 8005226:	601a      	str	r2, [r3, #0]
			stack_pointer += 6;
 8005228:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <SVC_Handler+0x1e4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3318      	adds	r3, #24
 800522e:	4a62      	ldr	r2, [pc, #392]	; (80053b8 <SVC_Handler+0x1e4>)
 8005230:	6013      	str	r3, [r2, #0]
			for(int i = 0;i < 8;i++) {
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	e013      	b.n	8005260 <SVC_Handler+0x8c>
				proccess[users_proccess].core_registers[i] = stack_pointer[i];
 8005238:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <SVC_Handler+0x1e4>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	4a5b      	ldr	r2, [pc, #364]	; (80053b0 <SVC_Handler+0x1dc>)
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	485a      	ldr	r0, [pc, #360]	; (80053b4 <SVC_Handler+0x1e0>)
 800524a:	4613      	mov	r3, r2
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	4413      	add	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4403      	add	r3, r0
 8005258:	6059      	str	r1, [r3, #4]
			for(int i = 0;i < 8;i++) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3301      	adds	r3, #1
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b07      	cmp	r3, #7
 8005264:	dde8      	ble.n	8005238 <SVC_Handler+0x64>
			}
			__asm("MOV %0, r4" : "=r" (proccess[users_proccess].user_registers[0]));
 8005266:	4b52      	ldr	r3, [pc, #328]	; (80053b0 <SVC_Handler+0x1dc>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4621      	mov	r1, r4
 800526c:	4851      	ldr	r0, [pc, #324]	; (80053b4 <SVC_Handler+0x1e0>)
 800526e:	4613      	mov	r3, r2
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4403      	add	r3, r0
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r5" : "=r" (proccess[users_proccess].user_registers[1]));
 800527c:	4b4c      	ldr	r3, [pc, #304]	; (80053b0 <SVC_Handler+0x1dc>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4629      	mov	r1, r5
 8005282:	484c      	ldr	r0, [pc, #304]	; (80053b4 <SVC_Handler+0x1e0>)
 8005284:	4613      	mov	r3, r2
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4403      	add	r3, r0
 800528e:	3328      	adds	r3, #40	; 0x28
 8005290:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r6" : "=r" (proccess[users_proccess].user_registers[2]));
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <SVC_Handler+0x1dc>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4631      	mov	r1, r6
 8005298:	4846      	ldr	r0, [pc, #280]	; (80053b4 <SVC_Handler+0x1e0>)
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4403      	add	r3, r0
 80052a4:	332c      	adds	r3, #44	; 0x2c
 80052a6:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r7" : "=r" (proccess[users_proccess].user_registers[3]));
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <SVC_Handler+0x1dc>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4639      	mov	r1, r7
 80052ae:	4841      	ldr	r0, [pc, #260]	; (80053b4 <SVC_Handler+0x1e0>)
 80052b0:	4613      	mov	r3, r2
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4403      	add	r3, r0
 80052ba:	3330      	adds	r3, #48	; 0x30
 80052bc:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r8" : "=r" (proccess[users_proccess].user_registers[4]));
 80052be:	4b3c      	ldr	r3, [pc, #240]	; (80053b0 <SVC_Handler+0x1dc>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4641      	mov	r1, r8
 80052c4:	483b      	ldr	r0, [pc, #236]	; (80053b4 <SVC_Handler+0x1e0>)
 80052c6:	4613      	mov	r3, r2
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4403      	add	r3, r0
 80052d0:	3334      	adds	r3, #52	; 0x34
 80052d2:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r9" : "=r" (proccess[users_proccess].user_registers[5]));
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <SVC_Handler+0x1dc>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4649      	mov	r1, r9
 80052da:	4836      	ldr	r0, [pc, #216]	; (80053b4 <SVC_Handler+0x1e0>)
 80052dc:	4613      	mov	r3, r2
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4403      	add	r3, r0
 80052e6:	3338      	adds	r3, #56	; 0x38
 80052e8:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r10" : "=r" (proccess[users_proccess].user_registers[6]));
 80052ea:	4b31      	ldr	r3, [pc, #196]	; (80053b0 <SVC_Handler+0x1dc>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4651      	mov	r1, sl
 80052f0:	4830      	ldr	r0, [pc, #192]	; (80053b4 <SVC_Handler+0x1e0>)
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4403      	add	r3, r0
 80052fc:	333c      	adds	r3, #60	; 0x3c
 80052fe:	6019      	str	r1, [r3, #0]
			__asm("MOV %0, r11" : "=r" (proccess[users_proccess].user_registers[7]));
 8005300:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <SVC_Handler+0x1dc>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4659      	mov	r1, fp
 8005306:	482b      	ldr	r0, [pc, #172]	; (80053b4 <SVC_Handler+0x1e0>)
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	3340      	adds	r3, #64	; 0x40
 8005314:	6019      	str	r1, [r3, #0]
			break;
 8005316:	e047      	b.n	80053a8 <SVC_Handler+0x1d4>
		case 2:
			users_proccess++;
 8005318:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <SVC_Handler+0x1dc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <SVC_Handler+0x1dc>)
 8005320:	6013      	str	r3, [r2, #0]
			aux = (sem_t*)p1;
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	4b25      	ldr	r3, [pc, #148]	; (80053bc <SVC_Handler+0x1e8>)
 8005328:	601a      	str	r2, [r3, #0]
			*aux = p2;
 800532a:	460a      	mov	r2, r1
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <SVC_Handler+0x1e8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	601a      	str	r2, [r3, #0]
			users_proccess--;
 8005332:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <SVC_Handler+0x1dc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <SVC_Handler+0x1dc>)
 800533a:	6013      	str	r3, [r2, #0]
			break;
 800533c:	e034      	b.n	80053a8 <SVC_Handler+0x1d4>
		case 3:
			users_proccess++;
 800533e:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <SVC_Handler+0x1dc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <SVC_Handler+0x1dc>)
 8005346:	6013      	str	r3, [r2, #0]
			aux = (sem_t*)p1;
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <SVC_Handler+0x1e8>)
 800534e:	601a      	str	r2, [r3, #0]
			*aux = *aux - 1;
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <SVC_Handler+0x1e8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <SVC_Handler+0x1e8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3a01      	subs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]
			users_proccess--;
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <SVC_Handler+0x1dc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <SVC_Handler+0x1dc>)
 8005366:	6013      	str	r3, [r2, #0]
			break;
 8005368:	e01e      	b.n	80053a8 <SVC_Handler+0x1d4>
		case 4:
			users_proccess++;
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <SVC_Handler+0x1dc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <SVC_Handler+0x1dc>)
 8005372:	6013      	str	r3, [r2, #0]
			aux = (sem_t*)p1;
 8005374:	4603      	mov	r3, r0
 8005376:	461a      	mov	r2, r3
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <SVC_Handler+0x1e8>)
 800537a:	601a      	str	r2, [r3, #0]
			*aux = *aux + 1;
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <SVC_Handler+0x1e8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <SVC_Handler+0x1e8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3201      	adds	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
			users_proccess--;
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <SVC_Handler+0x1dc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <SVC_Handler+0x1dc>)
 8005392:	6013      	str	r3, [r2, #0]
			break;
 8005394:	e008      	b.n	80053a8 <SVC_Handler+0x1d4>
		default:
			__asm("TST lr, #4");
 8005396:	f01e 0f04 	tst.w	lr, #4
			__asm("MRS r0, MSP;");
 800539a:	f3ef 8008 	mrs	r0, MSP
			/*Parametros = (int*)p1;
			p1 = Parametros[4];
			LlamadaSistema(p1, p2, p3, p4);
			Parametros[4]=p1;*/
			ServicioEscribir(p1, p2, p3);
 800539e:	4603      	mov	r3, r0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fd61 	bl	8004e68 <ServicioEscribir>
			break;
 80053a6:	bf00      	nop
	}
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}
 80053b0:	2000002c 	.word	0x2000002c
 80053b4:	200004ac 	.word	0x200004ac
 80053b8:	200004a4 	.word	0x200004a4
 80053bc:	200004a8 	.word	0x200004a8

080053c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	counter++;
 80053c6:	4b84      	ldr	r3, [pc, #528]	; (80055d8 <SysTick_Handler+0x218>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	4a82      	ldr	r2, [pc, #520]	; (80055d8 <SysTick_Handler+0x218>)
 80053ce:	6013      	str	r3, [r2, #0]
	if(counter >= 10 && users_proccess > 0) {
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <SysTick_Handler+0x218>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b09      	cmp	r3, #9
 80053d6:	f340 80f8 	ble.w	80055ca <SysTick_Handler+0x20a>
 80053da:	4b80      	ldr	r3, [pc, #512]	; (80055dc <SysTick_Handler+0x21c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f340 80f3 	ble.w	80055ca <SysTick_Handler+0x20a>
		counter = 0;
 80053e4:	4b7c      	ldr	r3, [pc, #496]	; (80055d8 <SysTick_Handler+0x218>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
		register int p1 asm("r0");
		__asm("TST lr, #4");
 80053ea:	f01e 0f04 	tst.w	lr, #4
		__asm("MRS r0, MSP;");
 80053ee:	f3ef 8008 	mrs	r0, MSP
		stack_pointer = (int*)p1;
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b7a      	ldr	r3, [pc, #488]	; (80055e0 <SysTick_Handler+0x220>)
 80053f8:	601a      	str	r2, [r3, #0]
		stack_pointer += 4;
 80053fa:	4b79      	ldr	r3, [pc, #484]	; (80055e0 <SysTick_Handler+0x220>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3310      	adds	r3, #16
 8005400:	4a77      	ldr	r2, [pc, #476]	; (80055e0 <SysTick_Handler+0x220>)
 8005402:	6013      	str	r3, [r2, #0]
		for(int i = 0;i < 8;i++) {
 8005404:	2300      	movs	r3, #0
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e013      	b.n	8005432 <SysTick_Handler+0x72>
			proccess[current_proccess].core_registers[i] = stack_pointer[i];
 800540a:	4b75      	ldr	r3, [pc, #468]	; (80055e0 <SysTick_Handler+0x220>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	4a73      	ldr	r2, [pc, #460]	; (80055e4 <SysTick_Handler+0x224>)
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	4873      	ldr	r0, [pc, #460]	; (80055e8 <SysTick_Handler+0x228>)
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4403      	add	r3, r0
 800542a:	6059      	str	r1, [r3, #4]
		for(int i = 0;i < 8;i++) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3301      	adds	r3, #1
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b07      	cmp	r3, #7
 8005436:	dde8      	ble.n	800540a <SysTick_Handler+0x4a>
		}
		__asm("MOV %0, r4" : "=r" (proccess[current_proccess].user_registers[0]));
 8005438:	4b6a      	ldr	r3, [pc, #424]	; (80055e4 <SysTick_Handler+0x224>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4621      	mov	r1, r4
 800543e:	486a      	ldr	r0, [pc, #424]	; (80055e8 <SysTick_Handler+0x228>)
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4403      	add	r3, r0
 800544a:	3324      	adds	r3, #36	; 0x24
 800544c:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r5" : "=r" (proccess[current_proccess].user_registers[1]));
 800544e:	4b65      	ldr	r3, [pc, #404]	; (80055e4 <SysTick_Handler+0x224>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4629      	mov	r1, r5
 8005454:	4864      	ldr	r0, [pc, #400]	; (80055e8 <SysTick_Handler+0x228>)
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4403      	add	r3, r0
 8005460:	3328      	adds	r3, #40	; 0x28
 8005462:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r6" : "=r" (proccess[current_proccess].user_registers[2]));
 8005464:	4b5f      	ldr	r3, [pc, #380]	; (80055e4 <SysTick_Handler+0x224>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4631      	mov	r1, r6
 800546a:	485f      	ldr	r0, [pc, #380]	; (80055e8 <SysTick_Handler+0x228>)
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4403      	add	r3, r0
 8005476:	332c      	adds	r3, #44	; 0x2c
 8005478:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r7" : "=r" (proccess[current_proccess].user_registers[3]));
 800547a:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <SysTick_Handler+0x224>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4639      	mov	r1, r7
 8005480:	4859      	ldr	r0, [pc, #356]	; (80055e8 <SysTick_Handler+0x228>)
 8005482:	4613      	mov	r3, r2
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4403      	add	r3, r0
 800548c:	3330      	adds	r3, #48	; 0x30
 800548e:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r8" : "=r" (proccess[current_proccess].user_registers[4]));
 8005490:	4b54      	ldr	r3, [pc, #336]	; (80055e4 <SysTick_Handler+0x224>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4641      	mov	r1, r8
 8005496:	4854      	ldr	r0, [pc, #336]	; (80055e8 <SysTick_Handler+0x228>)
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4403      	add	r3, r0
 80054a2:	3334      	adds	r3, #52	; 0x34
 80054a4:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r9" : "=r" (proccess[current_proccess].user_registers[5]));
 80054a6:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <SysTick_Handler+0x224>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4649      	mov	r1, r9
 80054ac:	484e      	ldr	r0, [pc, #312]	; (80055e8 <SysTick_Handler+0x228>)
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4403      	add	r3, r0
 80054b8:	3338      	adds	r3, #56	; 0x38
 80054ba:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r10" : "=r" (proccess[current_proccess].user_registers[6]));
 80054bc:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <SysTick_Handler+0x224>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4651      	mov	r1, sl
 80054c2:	4849      	ldr	r0, [pc, #292]	; (80055e8 <SysTick_Handler+0x228>)
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4403      	add	r3, r0
 80054ce:	333c      	adds	r3, #60	; 0x3c
 80054d0:	6019      	str	r1, [r3, #0]
		__asm("MOV %0, r11" : "=r" (proccess[current_proccess].user_registers[7]));
 80054d2:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <SysTick_Handler+0x224>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4659      	mov	r1, fp
 80054d8:	4843      	ldr	r0, [pc, #268]	; (80055e8 <SysTick_Handler+0x228>)
 80054da:	4613      	mov	r3, r2
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4403      	add	r3, r0
 80054e4:	3340      	adds	r3, #64	; 0x40
 80054e6:	6019      	str	r1, [r3, #0]

		current_proccess = (current_proccess == 0)?1:0;
 80054e8:	4b3e      	ldr	r3, [pc, #248]	; (80055e4 <SysTick_Handler+0x224>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <SysTick_Handler+0x224>)
 80054fa:	601a      	str	r2, [r3, #0]

		for (int i = 0;i < 8;i++) {
 80054fc:	2300      	movs	r3, #0
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	e013      	b.n	800552a <SysTick_Handler+0x16a>
			stack_pointer[i] = proccess[current_proccess].core_registers[i];
 8005502:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <SysTick_Handler+0x224>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <SysTick_Handler+0x220>)
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4419      	add	r1, r3
 8005510:	4835      	ldr	r0, [pc, #212]	; (80055e8 <SysTick_Handler+0x228>)
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	4413      	add	r3, r2
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4403      	add	r3, r0
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	600b      	str	r3, [r1, #0]
		for (int i = 0;i < 8;i++) {
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b07      	cmp	r3, #7
 800552e:	dde8      	ble.n	8005502 <SysTick_Handler+0x142>
		}
		__asm("MOV r4, %0" :: "r" (proccess[current_proccess].user_registers[0]));
 8005530:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <SysTick_Handler+0x224>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	492c      	ldr	r1, [pc, #176]	; (80055e8 <SysTick_Handler+0x228>)
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	3324      	adds	r3, #36	; 0x24
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461c      	mov	r4, r3
		__asm("MOV r5, %0" :: "r" (proccess[current_proccess].user_registers[1]));
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <SysTick_Handler+0x224>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4927      	ldr	r1, [pc, #156]	; (80055e8 <SysTick_Handler+0x228>)
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3328      	adds	r3, #40	; 0x28
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461d      	mov	r5, r3
		__asm("MOV r6, %0" :: "r" (proccess[current_proccess].user_registers[2]));
 800555c:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <SysTick_Handler+0x224>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4921      	ldr	r1, [pc, #132]	; (80055e8 <SysTick_Handler+0x228>)
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	332c      	adds	r3, #44	; 0x2c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461e      	mov	r6, r3
		__asm("MOV r8, %0" :: "r" (proccess[current_proccess].user_registers[4]));
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <SysTick_Handler+0x224>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	491c      	ldr	r1, [pc, #112]	; (80055e8 <SysTick_Handler+0x228>)
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	3334      	adds	r3, #52	; 0x34
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4698      	mov	r8, r3
		__asm("MOV r9, %0" :: "r" (proccess[current_proccess].user_registers[5]));
 8005588:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <SysTick_Handler+0x224>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4916      	ldr	r1, [pc, #88]	; (80055e8 <SysTick_Handler+0x228>)
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3338      	adds	r3, #56	; 0x38
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4699      	mov	r9, r3
		__asm("MOV r10, %0" :: "r" (proccess[current_proccess].user_registers[6]));
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <SysTick_Handler+0x224>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4911      	ldr	r1, [pc, #68]	; (80055e8 <SysTick_Handler+0x228>)
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	333c      	adds	r3, #60	; 0x3c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	469a      	mov	sl, r3
		__asm("MOV r11, %0" :: "r" (proccess[current_proccess].user_registers[7]));
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <SysTick_Handler+0x224>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	490b      	ldr	r1, [pc, #44]	; (80055e8 <SysTick_Handler+0x228>)
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3340      	adds	r3, #64	; 0x40
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	469b      	mov	fp, r3
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055ca:	f7fa fff3 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000030 	.word	0x20000030
 80055dc:	2000002c 	.word	0x2000002c
 80055e0:	200004a4 	.word	0x200004a4
 80055e4:	20000028 	.word	0x20000028
 80055e8:	200004ac 	.word	0x200004ac

080055ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <HAL_MspInit+0x44>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <HAL_MspInit+0x44>)
 80055f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fc:	6413      	str	r3, [r2, #64]	; 0x40
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_MspInit+0x44>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <HAL_MspInit+0x44>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	4a08      	ldr	r2, [pc, #32]	; (8005630 <HAL_MspInit+0x44>)
 8005610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005614:	6453      	str	r3, [r2, #68]	; 0x44
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HAL_MspInit+0x44>)
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800

08005634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005638:	bf00      	nop
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005646:	e7fe      	b.n	8005646 <HardFault_Handler+0x4>

08005648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800564c:	e7fe      	b.n	800564c <MemManage_Handler+0x4>

0800564e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005652:	e7fe      	b.n	8005652 <BusFault_Handler+0x4>

08005654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005658:	e7fe      	b.n	8005658 <UsageFault_Handler+0x4>

0800565a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <SystemInit+0x5c>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <SystemInit+0x5c>)
 8005684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800568c:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <SystemInit+0x60>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <SystemInit+0x60>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <SystemInit+0x60>)
 800569a:	2200      	movs	r2, #0
 800569c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <SystemInit+0x60>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	490d      	ldr	r1, [pc, #52]	; (80056d8 <SystemInit+0x60>)
 80056a4:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <SystemInit+0x64>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <SystemInit+0x60>)
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <SystemInit+0x68>)
 80056ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <SystemInit+0x60>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <SystemInit+0x60>)
 80056b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <SystemInit+0x60>)
 80056be:	2200      	movs	r2, #0
 80056c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <SystemInit+0x5c>)
 80056c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056c8:	609a      	str	r2, [r3, #8]
#endif
}
 80056ca:	bf00      	nop
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000ed00 	.word	0xe000ed00
 80056d8:	40023800 	.word	0x40023800
 80056dc:	fef6ffff 	.word	0xfef6ffff
 80056e0:	24003010 	.word	0x24003010

080056e4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b09a      	sub	sp, #104	; 0x68
 80056e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	609a      	str	r2, [r3, #8]
 80056f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	611a      	str	r2, [r3, #16]
 8005714:	615a      	str	r2, [r3, #20]
 8005716:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	222c      	movs	r2, #44	; 0x2c
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fa3a 	bl	8005b98 <memset>

  htim1.Instance = TIM1;
 8005724:	4b43      	ldr	r3, [pc, #268]	; (8005834 <MX_TIM1_Init+0x150>)
 8005726:	4a44      	ldr	r2, [pc, #272]	; (8005838 <MX_TIM1_Init+0x154>)
 8005728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96000;
 800572a:	4b42      	ldr	r3, [pc, #264]	; (8005834 <MX_TIM1_Init+0x150>)
 800572c:	4a43      	ldr	r2, [pc, #268]	; (800583c <MX_TIM1_Init+0x158>)
 800572e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005730:	4b40      	ldr	r3, [pc, #256]	; (8005834 <MX_TIM1_Init+0x150>)
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005736:	4b3f      	ldr	r3, [pc, #252]	; (8005834 <MX_TIM1_Init+0x150>)
 8005738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800573c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800573e:	4b3d      	ldr	r3, [pc, #244]	; (8005834 <MX_TIM1_Init+0x150>)
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005744:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <MX_TIM1_Init+0x150>)
 8005746:	2200      	movs	r2, #0
 8005748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800574a:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <MX_TIM1_Init+0x150>)
 800574c:	2200      	movs	r2, #0
 800574e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005750:	4838      	ldr	r0, [pc, #224]	; (8005834 <MX_TIM1_Init+0x150>)
 8005752:	f7fd f8fd 	bl	8002950 <HAL_TIM_Base_Init>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800575c:	f7ff fd0c 	bl	8005178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005764:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800576a:	4619      	mov	r1, r3
 800576c:	4831      	ldr	r0, [pc, #196]	; (8005834 <MX_TIM1_Init+0x150>)
 800576e:	f7fd fa67 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005778:	f7ff fcfe 	bl	8005178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800577c:	482d      	ldr	r0, [pc, #180]	; (8005834 <MX_TIM1_Init+0x150>)
 800577e:	f7fd f912 	bl	80029a6 <HAL_TIM_PWM_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005788:	f7ff fcf6 	bl	8005178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800578c:	2300      	movs	r3, #0
 800578e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005790:	2300      	movs	r3, #0
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800579c:	4619      	mov	r1, r3
 800579e:	4825      	ldr	r0, [pc, #148]	; (8005834 <MX_TIM1_Init+0x150>)
 80057a0:	f7fd fea0 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80057aa:	f7ff fce5 	bl	8005178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057ae:	2360      	movs	r3, #96	; 0x60
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80057ba:	2300      	movs	r3, #0
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057c6:	2300      	movs	r3, #0
 80057c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057ce:	2200      	movs	r2, #0
 80057d0:	4619      	mov	r1, r3
 80057d2:	4818      	ldr	r0, [pc, #96]	; (8005834 <MX_TIM1_Init+0x150>)
 80057d4:	f7fd f91c 	bl	8002a10 <HAL_TIM_PWM_ConfigChannel>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80057de:	f7ff fccb 	bl	8005178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005800:	2300      	movs	r3, #0
 8005802:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4807      	ldr	r0, [pc, #28]	; (8005834 <MX_TIM1_Init+0x150>)
 8005818:	f7fd fec0 	bl	800359c <HAL_TIMEx_ConfigBreakDeadTime>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005822:	f7ff fca9 	bl	8005178 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005826:	4803      	ldr	r0, [pc, #12]	; (8005834 <MX_TIM1_Init+0x150>)
 8005828:	f000 f82a 	bl	8005880 <HAL_TIM_MspPostInit>

}
 800582c:	bf00      	nop
 800582e:	3768      	adds	r7, #104	; 0x68
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000538 	.word	0x20000538
 8005838:	40010000 	.word	0x40010000
 800583c:	00017700 	.word	0x00017700

08005840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <HAL_TIM_Base_MspInit+0x38>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10b      	bne.n	800586a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_TIM_Base_MspInit+0x3c>)
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <HAL_TIM_Base_MspInit+0x3c>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6453      	str	r3, [r2, #68]	; 0x44
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_TIM_Base_MspInit+0x3c>)
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40010000 	.word	0x40010000
 800587c:	40023800 	.word	0x40023800

08005880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005888:	f107 030c 	add.w	r3, r7, #12
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a11      	ldr	r2, [pc, #68]	; (80058e4 <HAL_TIM_MspPostInit+0x64>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d11c      	bne.n	80058dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_TIM_MspPostInit+0x68>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <HAL_TIM_MspPostInit+0x68>)
 80058a8:	f043 0310 	orr.w	r3, r3, #16
 80058ac:	6313      	str	r3, [r2, #48]	; 0x30
 80058ae:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <HAL_TIM_MspPostInit+0x68>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80058ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c0:	2302      	movs	r3, #2
 80058c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80058cc:	2301      	movs	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	4619      	mov	r1, r3
 80058d6:	4805      	ldr	r0, [pc, #20]	; (80058ec <HAL_TIM_MspPostInit+0x6c>)
 80058d8:	f7fb fc4e 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80058dc:	bf00      	nop
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40021000 	.word	0x40021000

080058f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80058f4:	4b14      	ldr	r3, [pc, #80]	; (8005948 <MX_USART3_UART_Init+0x58>)
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <MX_USART3_UART_Init+0x5c>)
 80058f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <MX_USART3_UART_Init+0x58>)
 80058fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <MX_USART3_UART_Init+0x58>)
 8005904:	2200      	movs	r2, #0
 8005906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <MX_USART3_UART_Init+0x58>)
 800590a:	2200      	movs	r2, #0
 800590c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800590e:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <MX_USART3_UART_Init+0x58>)
 8005910:	2200      	movs	r2, #0
 8005912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <MX_USART3_UART_Init+0x58>)
 8005916:	220c      	movs	r2, #12
 8005918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <MX_USART3_UART_Init+0x58>)
 800591c:	2200      	movs	r2, #0
 800591e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <MX_USART3_UART_Init+0x58>)
 8005922:	2200      	movs	r2, #0
 8005924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005926:	4b08      	ldr	r3, [pc, #32]	; (8005948 <MX_USART3_UART_Init+0x58>)
 8005928:	2200      	movs	r2, #0
 800592a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <MX_USART3_UART_Init+0x58>)
 800592e:	2200      	movs	r2, #0
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005932:	4805      	ldr	r0, [pc, #20]	; (8005948 <MX_USART3_UART_Init+0x58>)
 8005934:	f7fd feb0 	bl	8003698 <HAL_UART_Init>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800593e:	f7ff fc1b 	bl	8005178 <Error_Handler>
  }

}
 8005942:	bf00      	nop
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000578 	.word	0x20000578
 800594c:	40004800 	.word	0x40004800

08005950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	60da      	str	r2, [r3, #12]
 8005966:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <HAL_UART_MspInit+0x8c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d130      	bne.n	80059d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <HAL_UART_MspInit+0x90>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <HAL_UART_MspInit+0x90>)
 8005978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800597c:	6413      	str	r3, [r2, #64]	; 0x40
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <HAL_UART_MspInit+0x90>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800598a:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <HAL_UART_MspInit+0x90>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <HAL_UART_MspInit+0x90>)
 8005990:	f043 0308 	orr.w	r3, r3, #8
 8005994:	6313      	str	r3, [r2, #48]	; 0x30
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <HAL_UART_MspInit+0x90>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80059a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a8:	2302      	movs	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b0:	2303      	movs	r3, #3
 80059b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80059b4:	2307      	movs	r3, #7
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	4619      	mov	r1, r3
 80059be:	4809      	ldr	r0, [pc, #36]	; (80059e4 <HAL_UART_MspInit+0x94>)
 80059c0:	f7fb fbda 	bl	8001178 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80059c4:	2200      	movs	r2, #0
 80059c6:	2100      	movs	r1, #0
 80059c8:	2027      	movs	r0, #39	; 0x27
 80059ca:	f7fa ff10 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80059ce:	2027      	movs	r0, #39	; 0x27
 80059d0:	f7fa ff29 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80059d4:	bf00      	nop
 80059d6:	3728      	adds	r7, #40	; 0x28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40004800 	.word	0x40004800
 80059e0:	40023800 	.word	0x40023800
 80059e4:	40020c00 	.word	0x40020c00

080059e8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80059f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80059f4:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059f6:	2206      	movs	r2, #6
 80059f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059fc:	2202      	movs	r2, #2
 80059fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005a06:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005a2a:	4805      	ldr	r0, [pc, #20]	; (8005a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005a2c:	f7fb fd67 	bl	80014fe <HAL_PCD_Init>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005a36:	f7ff fb9f 	bl	8005178 <Error_Handler>
  }

}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	200005f8 	.word	0x200005f8

08005a44 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a64:	d141      	bne.n	8005aea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a66:	4b23      	ldr	r3, [pc, #140]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a22      	ldr	r2, [pc, #136]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005a7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a84:	2302      	movs	r3, #2
 8005a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005a90:	230a      	movs	r3, #10
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4817      	ldr	r0, [pc, #92]	; (8005af8 <HAL_PCD_MspInit+0xb4>)
 8005a9c:	f7fb fb6c 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005aae:	f107 0314 	add.w	r3, r7, #20
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4810      	ldr	r0, [pc, #64]	; (8005af8 <HAL_PCD_MspInit+0xb4>)
 8005ab6:	f7fb fb5f 	bl	8001178 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	6353      	str	r3, [r2, #52]	; 0x34
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	4a07      	ldr	r2, [pc, #28]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005adc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <HAL_PCD_MspInit+0xb0>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005aea:	bf00      	nop
 8005aec:	3728      	adds	r7, #40	; 0x28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40020000 	.word	0x40020000

08005afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b02:	e003      	b.n	8005b0c <LoopCopyDataInit>

08005b04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b0a:	3104      	adds	r1, #4

08005b0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b0c:	480b      	ldr	r0, [pc, #44]	; (8005b3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b14:	d3f6      	bcc.n	8005b04 <CopyDataInit>
  ldr  r2, =_sbss
 8005b16:	4a0b      	ldr	r2, [pc, #44]	; (8005b44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b18:	e002      	b.n	8005b20 <LoopFillZerobss>

08005b1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b1c:	f842 3b04 	str.w	r3, [r2], #4

08005b20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b20:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b24:	d3f9      	bcc.n	8005b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b26:	f7ff fda7 	bl	8005678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b2a:	f000 f811 	bl	8005b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b2e:	f7ff fa33 	bl	8004f98 <main>
  bx  lr    
 8005b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b34:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005b38:	08005c00 	.word	0x08005c00
  ldr  r0, =_sdata
 8005b3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b40:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005b44:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8005b48:	200009fc 	.word	0x200009fc

08005b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b4c:	e7fe      	b.n	8005b4c <ADC_IRQHandler>
	...

08005b50 <__libc_init_array>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0d      	ldr	r6, [pc, #52]	; (8005b88 <__libc_init_array+0x38>)
 8005b54:	4c0d      	ldr	r4, [pc, #52]	; (8005b8c <__libc_init_array+0x3c>)
 8005b56:	1ba4      	subs	r4, r4, r6
 8005b58:	10a4      	asrs	r4, r4, #2
 8005b5a:	2500      	movs	r5, #0
 8005b5c:	42a5      	cmp	r5, r4
 8005b5e:	d109      	bne.n	8005b74 <__libc_init_array+0x24>
 8005b60:	4e0b      	ldr	r6, [pc, #44]	; (8005b90 <__libc_init_array+0x40>)
 8005b62:	4c0c      	ldr	r4, [pc, #48]	; (8005b94 <__libc_init_array+0x44>)
 8005b64:	f000 f820 	bl	8005ba8 <_init>
 8005b68:	1ba4      	subs	r4, r4, r6
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	42a5      	cmp	r5, r4
 8005b70:	d105      	bne.n	8005b7e <__libc_init_array+0x2e>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b78:	4798      	blx	r3
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	e7ee      	b.n	8005b5c <__libc_init_array+0xc>
 8005b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b82:	4798      	blx	r3
 8005b84:	3501      	adds	r5, #1
 8005b86:	e7f2      	b.n	8005b6e <__libc_init_array+0x1e>
 8005b88:	08005bf8 	.word	0x08005bf8
 8005b8c:	08005bf8 	.word	0x08005bf8
 8005b90:	08005bf8 	.word	0x08005bf8
 8005b94:	08005bfc 	.word	0x08005bfc

08005b98 <memset>:
 8005b98:	4402      	add	r2, r0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <memset+0xa>
 8005ba0:	4770      	bx	lr
 8005ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba6:	e7f9      	b.n	8005b9c <memset+0x4>

08005ba8 <_init>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr

08005bb4 <_fini>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr
