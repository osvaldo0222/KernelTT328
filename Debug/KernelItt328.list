
KernelItt328.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a10  08005a10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a18  08005a18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  2000000c  08005a2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  08005a2c  00020948  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015635  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fce  00000000  00000000  0003566f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  00038640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  00039920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028cff  00000000  00000000  0003aa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101c4  00000000  00000000  00063757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd30d  00000000  00000000  0007391b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc4  00000000  00000000  00170ca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080059e0 	.word	0x080059e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080059e0 	.word	0x080059e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f94b 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f004 ff52 	bl	80053f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f965 	bl	8000842 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f92d 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000004 	.word	0x20000004

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <__NVIC_SetPriorityGrouping+0x40>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x40>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	05fa0000 	.word	0x05fa0000

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff29 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff3e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff31 	bl	800069c <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b02      	cmp	r3, #2
 800086c:	d004      	beq.n	8000878 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e00c      	b.n	8000892 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2205      	movs	r2, #5
 800087c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f022 0201 	bic.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80008b0:	4ba9      	ldr	r3, [pc, #676]	; (8000b58 <HAL_ETH_Init+0x2b8>)
 80008b2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e183      	b.n	8000bce <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f004 fa18 	bl	8004d10 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e0:	4b9e      	ldr	r3, [pc, #632]	; (8000b5c <HAL_ETH_Init+0x2bc>)
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	4a9d      	ldr	r2, [pc, #628]	; (8000b5c <HAL_ETH_Init+0x2bc>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6453      	str	r3, [r2, #68]	; 0x44
 80008ec:	4b9b      	ldr	r3, [pc, #620]	; (8000b5c <HAL_ETH_Init+0x2bc>)
 80008ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008f8:	4b99      	ldr	r3, [pc, #612]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a98      	ldr	r2, [pc, #608]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 80008fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000902:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000904:	4b96      	ldr	r3, [pc, #600]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4994      	ldr	r1, [pc, #592]	; (8000b60 <HAL_ETH_Init+0x2c0>)
 800090e:	4313      	orrs	r3, r2
 8000910:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0201 	orr.w	r2, r2, #1
 8000924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000928:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800092a:	f7ff fe57 	bl	80005dc <HAL_GetTick>
 800092e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000930:	e011      	b.n	8000956 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000932:	f7ff fe53 	bl	80005dc <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000940:	d909      	bls.n	8000956 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2203      	movs	r2, #3
 8000946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e13b      	b.n	8000bce <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1e4      	bne.n	8000932 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f023 031c 	bic.w	r3, r3, #28
 8000976:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000978:	f001 fba8 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 800097c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	4a78      	ldr	r2, [pc, #480]	; (8000b64 <HAL_ETH_Init+0x2c4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d908      	bls.n	8000998 <HAL_ETH_Init+0xf8>
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	4a77      	ldr	r2, [pc, #476]	; (8000b68 <HAL_ETH_Init+0x2c8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d804      	bhi.n	8000998 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	e027      	b.n	80009e8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	4a73      	ldr	r2, [pc, #460]	; (8000b68 <HAL_ETH_Init+0x2c8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d908      	bls.n	80009b2 <HAL_ETH_Init+0x112>
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	4a72      	ldr	r2, [pc, #456]	; (8000b6c <HAL_ETH_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d804      	bhi.n	80009b2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f043 030c 	orr.w	r3, r3, #12
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e01a      	b.n	80009e8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4a6d      	ldr	r2, [pc, #436]	; (8000b6c <HAL_ETH_Init+0x2cc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d903      	bls.n	80009c2 <HAL_ETH_Init+0x122>
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4a6c      	ldr	r2, [pc, #432]	; (8000b70 <HAL_ETH_Init+0x2d0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d911      	bls.n	80009e6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4a6a      	ldr	r2, [pc, #424]	; (8000b70 <HAL_ETH_Init+0x2d0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d908      	bls.n	80009dc <HAL_ETH_Init+0x13c>
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	4a69      	ldr	r2, [pc, #420]	; (8000b74 <HAL_ETH_Init+0x2d4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d804      	bhi.n	80009dc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	e005      	b.n	80009e8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e000      	b.n	80009e8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	69fa      	ldr	r2, [r7, #28]
 80009ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f4:	2100      	movs	r1, #0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f956 	bl	8000ca8 <HAL_ETH_WritePHYRegister>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00b      	beq.n	8000a1a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a06:	6939      	ldr	r1, [r7, #16]
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f9b3 	bl	8000d74 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2201      	movs	r2, #1
 8000a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e0d9      	b.n	8000bce <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a1a:	20ff      	movs	r0, #255	; 0xff
 8000a1c:	f7ff fdea 	bl	80005f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80a7 	beq.w	8000b78 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a2a:	f7ff fdd7 	bl	80005dc <HAL_GetTick>
 8000a2e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	461a      	mov	r2, r3
 8000a36:	2101      	movs	r1, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 f8cd 	bl	8000bd8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a3e:	f7ff fdcd 	bl	80005dc <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d90f      	bls.n	8000a70 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a54:	6939      	ldr	r1, [r7, #16]
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f98c 	bl	8000d74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e0ae      	b.n	8000bce <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0da      	beq.n	8000a30 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f911 	bl	8000ca8 <HAL_ETH_WritePHYRegister>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a90:	6939      	ldr	r1, [r7, #16]
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f96e 	bl	8000d74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e094      	b.n	8000bce <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000aa4:	f7ff fd9a 	bl	80005dc <HAL_GetTick>
 8000aa8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f890 	bl	8000bd8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ab8:	f7ff fd90 	bl	80005dc <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d90f      	bls.n	8000aea <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ace:	6939      	ldr	r1, [r7, #16]
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f94f 	bl	8000d74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e071      	b.n	8000bce <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0da      	beq.n	8000aaa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	461a      	mov	r2, r3
 8000afa:	211f      	movs	r1, #31
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f86b 	bl	8000bd8 <HAL_ETH_ReadPHYRegister>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b0c:	6939      	ldr	r1, [r7, #16]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f930 	bl	8000d74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e056      	b.n	8000bce <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	e002      	b.n	8000b3a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	e037      	b.n	8000bbc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	e032      	b.n	8000bbc <HAL_ETH_Init+0x31c>
 8000b56:	bf00      	nop
 8000b58:	03938700 	.word	0x03938700
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40013800 	.word	0x40013800
 8000b64:	01312cff 	.word	0x01312cff
 8000b68:	02160ebf 	.word	0x02160ebf
 8000b6c:	039386ff 	.word	0x039386ff
 8000b70:	05f5e0ff 	.word	0x05f5e0ff
 8000b74:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f889 	bl	8000ca8 <HAL_ETH_WritePHYRegister>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00b      	beq.n	8000bb4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f8e6 	bl	8000d74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e00c      	b.n	8000bce <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000bb4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bb8:	f7ff fd1c 	bl	80005f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f8d8 	bl	8000d74 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop

08000bd8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	460b      	mov	r3, r1
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b82      	cmp	r3, #130	; 0x82
 8000bf8:	d101      	bne.n	8000bfe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e050      	b.n	8000ca0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2282      	movs	r2, #130	; 0x82
 8000c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 031c 	and.w	r3, r3, #28
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	8a1b      	ldrh	r3, [r3, #16]
 8000c1a:	02db      	lsls	r3, r3, #11
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c24:	897b      	ldrh	r3, [r7, #10]
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f023 0302 	bic.w	r3, r3, #2
 8000c38:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c4a:	f7ff fcc7 	bl	80005dc <HAL_GetTick>
 8000c4e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c50:	e015      	b.n	8000c7e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c52:	f7ff fcc3 	bl	80005dc <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c60:	d309      	bcc.n	8000c76 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e014      	b.n	8000ca0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e4      	bne.n	8000c52 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b42      	cmp	r3, #66	; 0x42
 8000cc8:	d101      	bne.n	8000cce <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e04e      	b.n	8000d6c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2242      	movs	r2, #66	; 0x42
 8000cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f003 031c 	and.w	r3, r3, #28
 8000ce4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	8a1b      	ldrh	r3, [r3, #16]
 8000cea:	02db      	lsls	r3, r3, #11
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cf4:	897b      	ldrh	r3, [r7, #10]
 8000cf6:	019b      	lsls	r3, r3, #6
 8000cf8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d24:	f7ff fc5a 	bl	80005dc <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d2a:	e015      	b.n	8000d58 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d2c:	f7ff fc56 	bl	80005dc <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d309      	bcc.n	8000d50 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e00d      	b.n	8000d6c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1e4      	bne.n	8000d2c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0b0      	sub	sp, #192	; 0xc0
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d90:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d98:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8000dc0:	e001      	b.n	8000dc6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dca:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e4c:	4bab      	ldr	r3, [pc, #684]	; (80010fc <ETH_MACDMAConfig+0x388>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e58:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e5c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e60:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e66:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e6a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e6e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e74:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e78:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e7c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e80:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e84:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e9c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fba3 	bl	80005f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000eb6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000eb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ebc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000ec0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000ec6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000ecc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000ed2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000ed8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000edc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000ee4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ee6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fb7e 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f00:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f0a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000f14:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000f20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f24:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f28:	4013      	ands	r3, r2
 8000f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f32:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000f34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f38:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000f3e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000f44:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000f4a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f50:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f64:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fb3f 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f7e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fb2a 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fa8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000fb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fbc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f241 0318 	movw	r3, #4120	; 0x1018
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <ETH_MACDMAConfig+0x38c>)
 800100c:	4013      	ands	r3, r2
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001012:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001014:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001016:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001018:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800101a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800101c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800101e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001020:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001022:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001024:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001026:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001028:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800102a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800102e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001030:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001032:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001034:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001038:	4313      	orrs	r3, r2
 800103a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f241 0318 	movw	r3, #4120	; 0x1018
 8001046:	4413      	add	r3, r2
 8001048:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800104c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f241 0318 	movw	r3, #4120	; 0x1018
 8001056:	4413      	add	r3, r2
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fac8 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f241 0318 	movw	r3, #4120	; 0x1018
 800106c:	4413      	add	r3, r2
 800106e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001072:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001078:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800107c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001080:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001084:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001088:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800108a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800108c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800108e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800109c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff faa1 	bl	80005f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010be:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10d      	bne.n	80010e4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f241 031c 	movw	r3, #4124	; 0x101c
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <ETH_MACDMAConfig+0x390>)
 80010da:	431a      	orrs	r2, r3
 80010dc:	f241 031c 	movw	r3, #4124	; 0x101c
 80010e0:	440b      	add	r3, r1
 80010e2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	461a      	mov	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f80b 	bl	8001108 <ETH_MACAddressConfig>
}
 80010f2:	bf00      	nop
 80010f4:	37c0      	adds	r7, #192	; 0xc0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	ff20810f 	.word	0xff20810f
 8001100:	f8de3f23 	.word	0xf8de3f23
 8001104:	00010040 	.word	0x00010040

08001108 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3305      	adds	r3, #5
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	3204      	adds	r2, #4
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <ETH_MACAddressConfig+0x68>)
 800112a:	4413      	add	r3, r2
 800112c:	461a      	mov	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3303      	adds	r3, #3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	061a      	lsls	r2, r3, #24
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3302      	adds	r3, #2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	4313      	orrs	r3, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	4313      	orrs	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <ETH_MACAddressConfig+0x6c>)
 800115a:	4413      	add	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40028040 	.word	0x40028040
 8001174:	40028044 	.word	0x40028044

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e175      	b.n	8001484 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8164 	bne.w	800147e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x4e>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	69b9      	ldr	r1, [r7, #24]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d00b      	beq.n	8001262 <HAL_GPIO_Init+0xea>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001256:	2b11      	cmp	r3, #17
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b12      	cmp	r3, #18
 8001260:	d130      	bne.n	80012c4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80be 	beq.w	800147e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b65      	ldr	r3, [pc, #404]	; (8001498 <HAL_GPIO_Init+0x320>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a64      	ldr	r2, [pc, #400]	; (8001498 <HAL_GPIO_Init+0x320>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <HAL_GPIO_Init+0x320>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800131a:	4a60      	ldr	r2, [pc, #384]	; (800149c <HAL_GPIO_Init+0x324>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a57      	ldr	r2, [pc, #348]	; (80014a0 <HAL_GPIO_Init+0x328>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d037      	beq.n	80013b6 <HAL_GPIO_Init+0x23e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d031      	beq.n	80013b2 <HAL_GPIO_Init+0x23a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02b      	beq.n	80013ae <HAL_GPIO_Init+0x236>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a54      	ldr	r2, [pc, #336]	; (80014ac <HAL_GPIO_Init+0x334>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_Init+0x232>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a53      	ldr	r2, [pc, #332]	; (80014b0 <HAL_GPIO_Init+0x338>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01f      	beq.n	80013a6 <HAL_GPIO_Init+0x22e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_GPIO_Init+0x33c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x22a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_GPIO_Init+0x340>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x226>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a50      	ldr	r2, [pc, #320]	; (80014bc <HAL_GPIO_Init+0x344>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x222>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4f      	ldr	r2, [pc, #316]	; (80014c0 <HAL_GPIO_Init+0x348>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x21e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4e      	ldr	r2, [pc, #312]	; (80014c4 <HAL_GPIO_Init+0x34c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x21a>
 800138e:	2309      	movs	r3, #9
 8001390:	e012      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 8001392:	230a      	movs	r3, #10
 8001394:	e010      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 8001396:	2308      	movs	r3, #8
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 800139a:	2307      	movs	r3, #7
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x240>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013c8:	4934      	ldr	r1, [pc, #208]	; (800149c <HAL_GPIO_Init+0x324>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_GPIO_Init+0x350>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_GPIO_Init+0x350>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_GPIO_Init+0x350>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x350>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <HAL_GPIO_Init+0x350>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae86 	bls.w	8001198 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	3724      	adds	r7, #36	; 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40021c00 	.word	0x40021c00
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40022400 	.word	0x40022400
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001518:	e003      	b.n	8001522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800152e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001530:	b08f      	sub	sp, #60	; 0x3c
 8001532:	af0a      	add	r7, sp, #40	; 0x28
 8001534:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e10a      	b.n	8001756 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f004 f991 	bl	800587c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f003 f936 	bl	80047d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	687e      	ldr	r6, [r7, #4]
 8001574:	466d      	mov	r5, sp
 8001576:	f106 0410 	add.w	r4, r6, #16
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001586:	e885 0003 	stmia.w	r5, {r0, r1}
 800158a:	1d33      	adds	r3, r6, #4
 800158c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f003 f8ca 	bl	8004728 <USB_CoreInit>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2202      	movs	r2, #2
 800159e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0d7      	b.n	8001756 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 f924 	bl	80047fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e04a      	b.n	800164e <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	333d      	adds	r3, #61	; 0x3d
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	333c      	adds	r3, #60	; 0x3c
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	b298      	uxth	r0, r3
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3342      	adds	r3, #66	; 0x42
 80015f4:	4602      	mov	r2, r0
 80015f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	333f      	adds	r3, #63	; 0x3f
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3344      	adds	r3, #68	; 0x44
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3348      	adds	r3, #72	; 0x48
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3350      	adds	r3, #80	; 0x50
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3af      	bcc.n	80015b8 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e044      	b.n	80016e8 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3b5      	bcc.n	800165e <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	687e      	ldr	r6, [r7, #4]
 80016fa:	466d      	mov	r5, sp
 80016fc:	f106 0410 	add.w	r4, r6, #16
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800170c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001710:	1d33      	adds	r3, r6, #4
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f003 f89b 	bl	8004850 <USB_DevInit>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e014      	b.n	8001756 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f80b 	bl	8001760 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fa5b 	bl	8004c0a <USB_DevDisconnect>

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001760 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001790:	4313      	orrs	r3, r2
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	10000003 	.word	0x10000003

080017a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40007000 	.word	0x40007000

080017c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_PWREx_EnableOverDrive+0x98>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_PWREx_EnableOverDrive+0x98>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_PWREx_EnableOverDrive+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f6:	f7fe fef1 	bl	80005dc <HAL_GetTick>
 80017fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017fc:	e009      	b.n	8001812 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017fe:	f7fe feed 	bl	80005dc <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800180c:	d901      	bls.n	8001812 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e022      	b.n	8001858 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181e:	d1ee      	bne.n	80017fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800182c:	f7fe fed6 	bl	80005dc <HAL_GetTick>
 8001830:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001832:	e009      	b.n	8001848 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001834:	f7fe fed2 	bl	80005dc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001842:	d901      	bls.n	8001848 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e007      	b.n	8001858 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_PWREx_EnableOverDrive+0x9c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001854:	d1ee      	bne.n	8001834 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e25e      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188c:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001898:	4b93      	ldr	r3, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d112      	bne.n	80018ca <HAL_RCC_OscConfig+0x62>
 80018a4:	4b90      	ldr	r3, [pc, #576]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b0:	d10b      	bne.n	80018ca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	4b8d      	ldr	r3, [pc, #564]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_RCC_OscConfig+0x130>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d168      	bne.n	8001998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e238      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x7a>
 80018d4:	4b84      	ldr	r3, [pc, #528]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a83      	ldr	r2, [pc, #524]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e02e      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x9c>
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7e      	ldr	r2, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7b      	ldr	r2, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0xc0>
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b6c      	ldr	r3, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6b      	ldr	r2, [pc, #428]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7fe fe48 	bl	80005dc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7fe fe44 	bl	80005dc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1ec      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7fe fe34 	bl	80005dc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7fe fe30 	bl	80005dc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1d8      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x110>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d069      	beq.n	8001a7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x190>
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1ac      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	493d      	ldr	r1, [pc, #244]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e040      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fde6 	bl	80005dc <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7fe fde2 	bl	80005dc <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e18a      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4929      	ldr	r1, [pc, #164]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7fe fdc2 	bl	80005dc <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7fe fdbe 	bl	80005dc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e166      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d038      	beq.n	8001af8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7fe fd9f 	bl	80005dc <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7fe fd9b 	bl	80005dc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e143      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x23a>
 8001ac0:	e01a      	b.n	8001af8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7fe fd85 	bl	80005dc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7fe fd81 	bl	80005dc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d903      	bls.n	8001aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e129      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
 8001ae8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b95      	ldr	r3, [pc, #596]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ee      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a4 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8f      	ldr	r3, [pc, #572]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a8b      	ldr	r2, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <HAL_RCC_OscConfig+0x4e0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b3a:	4b83      	ldr	r3, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x4e0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a82      	ldr	r2, [pc, #520]	; (8001d48 <HAL_RCC_OscConfig+0x4e0>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7fe fd49 	bl	80005dc <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7fe fd45 	bl	80005dc <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0ed      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <HAL_RCC_OscConfig+0x4e0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x31a>
 8001b74:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a72      	ldr	r2, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x33c>
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a6d      	ldr	r2, [pc, #436]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x35e>
 8001bac:	4b65      	ldr	r3, [pc, #404]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a64      	ldr	r2, [pc, #400]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a5e      	ldr	r2, [pc, #376]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	4b5c      	ldr	r3, [pc, #368]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a5b      	ldr	r2, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7fe fcf9 	bl	80005dc <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7fe fcf5 	bl	80005dc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e09b      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x386>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7fe fce3 	bl	80005dc <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7fe fcdf 	bl	80005dc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e085      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d071      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d069      	beq.n	8001d36 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d14b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a35      	ldr	r2, [pc, #212]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7fe fcb1 	bl	80005dc <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe fcad 	bl	80005dc <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e055      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	071b      	lsls	r3, r3, #28
 8001cc8:	491e      	ldr	r1, [pc, #120]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7fe fc7f 	bl	80005dc <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7fe fc7b 	bl	80005dc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e023      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x47a>
 8001d00:	e01b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fc65 	bl	80005dc <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe fc61 	bl	80005dc <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x4dc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4ae>
 8001d34:	e001      	b.n	8001d3a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0ce      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b69      	ldr	r3, [pc, #420]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 020f 	bic.w	r2, r3, #15
 8001d7a:	4964      	ldr	r1, [pc, #400]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b6      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494c      	ldr	r1, [pc, #304]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07d      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e071      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e069      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7fe fbcc 	bl	80005dc <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe fbc8 	bl	80005dc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e051      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d210      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	4921      	ldr	r1, [pc, #132]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e030      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4915      	ldr	r1, [pc, #84]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490d      	ldr	r1, [pc, #52]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f81d 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_RCC_ClockConfig+0x1cc>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7fe fb2a 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00
 8001f10:	40023800 	.word	0x40023800
 8001f14:	080059f8 	.word	0x080059f8
 8001f18:	20000008 	.word	0x20000008

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d007      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x32>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x38>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80b4 	bne.w	80020b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f4a:	60bb      	str	r3, [r7, #8]
       break;
 8001f4c:	e0b3      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f50:	60bb      	str	r3, [r7, #8]
      break;
 8001f52:	e0b0      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d04a      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4b55      	ldr	r3, [pc, #340]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	f04f 0400 	mov.w	r4, #0
 8001f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	ea03 0501 	and.w	r5, r3, r1
 8001f80:	ea04 0602 	and.w	r6, r4, r2
 8001f84:	4629      	mov	r1, r5
 8001f86:	4632      	mov	r2, r6
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	0154      	lsls	r4, r2, #5
 8001f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f96:	014b      	lsls	r3, r1, #5
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	1b49      	subs	r1, r1, r5
 8001f9e:	eb62 0206 	sbc.w	r2, r2, r6
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	0194      	lsls	r4, r2, #6
 8001fac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb0:	018b      	lsls	r3, r1, #6
 8001fb2:	1a5b      	subs	r3, r3, r1
 8001fb4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fc6:	00d9      	lsls	r1, r3, #3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4614      	mov	r4, r2
 8001fcc:	195b      	adds	r3, r3, r5
 8001fce:	eb44 0406 	adc.w	r4, r4, r6
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	0262      	lsls	r2, r4, #9
 8001fdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fe0:	0259      	lsls	r1, r3, #9
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4621      	mov	r1, r4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f04f 0400 	mov.w	r4, #0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	f7fe f920 	bl	8000238 <__aeabi_uldivmod>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e049      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	f04f 0400 	mov.w	r4, #0
 800200a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	ea03 0501 	and.w	r5, r3, r1
 8002016:	ea04 0602 	and.w	r6, r4, r2
 800201a:	4629      	mov	r1, r5
 800201c:	4632      	mov	r2, r6
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	0154      	lsls	r4, r2, #5
 8002028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800202c:	014b      	lsls	r3, r1, #5
 800202e:	4619      	mov	r1, r3
 8002030:	4622      	mov	r2, r4
 8002032:	1b49      	subs	r1, r1, r5
 8002034:	eb62 0206 	sbc.w	r2, r2, r6
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	0194      	lsls	r4, r2, #6
 8002042:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002046:	018b      	lsls	r3, r1, #6
 8002048:	1a5b      	subs	r3, r3, r1
 800204a:	eb64 0402 	sbc.w	r4, r4, r2
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	00e2      	lsls	r2, r4, #3
 8002058:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800205c:	00d9      	lsls	r1, r3, #3
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	195b      	adds	r3, r3, r5
 8002064:	eb44 0406 	adc.w	r4, r4, r6
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	02a2      	lsls	r2, r4, #10
 8002072:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002076:	0299      	lsls	r1, r3, #10
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	f7fe f8d5 	bl	8000238 <__aeabi_uldivmod>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
 8002092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	60bb      	str	r3, [r7, #8]
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020b2:	60bb      	str	r3, [r7, #8]
      break;
 80020b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b6:	68bb      	ldr	r3, [r7, #8]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4601      	mov	r1, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	08005a08 	.word	0x08005a08

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002110:	f7ff ffdc 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002114:	4601      	mov	r1, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0b5b      	lsrs	r3, r3, #13
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4a03      	ldr	r2, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	08005a08 	.word	0x08005a08

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002166:	6093      	str	r3, [r2, #8]
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	4964      	ldr	r1, [pc, #400]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d017      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	4959      	ldr	r1, [pc, #356]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ac:	d101      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d017      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ca:	4b4e      	ldr	r3, [pc, #312]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	494a      	ldr	r1, [pc, #296]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002206:	2301      	movs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 808b 	beq.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a39      	ldr	r2, [pc, #228]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a34      	ldr	r2, [pc, #208]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223c:	f7fe f9ce 	bl	80005dc <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7fe f9ca 	bl	80005dc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e38d      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d035      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d02e      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d114      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe f992 	bl	80005dc <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe f98e 	bl	80005dc <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e34f      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0ee      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ea:	d111      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	4901      	ldr	r1, [pc, #4]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
 8002302:	e00b      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	0ffffcff 	.word	0x0ffffcff
 8002310:	4bb3      	ldr	r3, [pc, #716]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4ab2      	ldr	r2, [pc, #712]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800231a:	6093      	str	r3, [r2, #8]
 800231c:	4bb0      	ldr	r3, [pc, #704]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800231e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	49ad      	ldr	r1, [pc, #692]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232a:	4313      	orrs	r3, r2
 800232c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800233a:	4ba9      	ldr	r3, [pc, #676]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002340:	4aa7      	ldr	r2, [pc, #668]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800234a:	4ba5      	ldr	r3, [pc, #660]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800234c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	49a2      	ldr	r1, [pc, #648]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002368:	4b9d      	ldr	r3, [pc, #628]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002376:	499a      	ldr	r1, [pc, #616]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238a:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002398:	4991      	ldr	r1, [pc, #580]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ac:	4b8c      	ldr	r3, [pc, #560]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	4989      	ldr	r1, [pc, #548]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ce:	4b84      	ldr	r3, [pc, #528]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4980      	ldr	r1, [pc, #512]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f0:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4978      	ldr	r1, [pc, #480]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f023 020c 	bic.w	r2, r3, #12
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	496f      	ldr	r1, [pc, #444]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	4967      	ldr	r1, [pc, #412]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002456:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	495e      	ldr	r1, [pc, #376]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	4956      	ldr	r1, [pc, #344]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800249a:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	494d      	ldr	r1, [pc, #308]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024bc:	4b48      	ldr	r3, [pc, #288]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	4945      	ldr	r1, [pc, #276]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024de:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	493c      	ldr	r1, [pc, #240]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002500:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250e:	4934      	ldr	r1, [pc, #208]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d011      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002530:	492b      	ldr	r1, [pc, #172]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002570:	491b      	ldr	r1, [pc, #108]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002594:	4912      	ldr	r1, [pc, #72]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b8:	4909      	ldr	r1, [pc, #36]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00f      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	e002      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	4985      	ldr	r1, [pc, #532]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025f8:	4b80      	ldr	r3, [pc, #512]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002608:	497c      	ldr	r1, [pc, #496]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261e:	f040 80d6 	bne.w	80027ce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002628:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800262c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262e:	f7fd ffd5 	bl	80005dc <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002636:	f7fd ffd1 	bl	80005dc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e194      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d021      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11d      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002668:	4b64      	ldr	r3, [pc, #400]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800266a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002676:	4b61      	ldr	r3, [pc, #388]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	0e1b      	lsrs	r3, r3, #24
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	019a      	lsls	r2, r3, #6
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	061b      	lsls	r3, r3, #24
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	4957      	ldr	r1, [pc, #348]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x586>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02e      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ce:	d129      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026d0:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e4:	0f1b      	lsrs	r3, r3, #28
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	019a      	lsls	r2, r3, #6
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	431a      	orrs	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	071b      	lsls	r3, r3, #28
 8002704:	493d      	ldr	r1, [pc, #244]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800270e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002712:	f023 021f 	bic.w	r2, r3, #31
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	3b01      	subs	r3, #1
 800271c:	4937      	ldr	r1, [pc, #220]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01d      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002736:	0e1b      	lsrs	r3, r3, #24
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002744:	0f1b      	lsrs	r3, r3, #28
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	019a      	lsls	r2, r3, #6
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	431a      	orrs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	071b      	lsls	r3, r3, #28
 8002764:	4925      	ldr	r1, [pc, #148]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d011      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	019a      	lsls	r2, r3, #6
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	071b      	lsls	r3, r3, #28
 8002794:	4919      	ldr	r1, [pc, #100]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fd ff18 	bl	80005dc <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027b0:	f7fd ff14 	bl	80005dc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0d7      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f040 80cd 	bne.w	8002970 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e2:	f7fd fefb 	bl	80005dc <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027ea:	f7fd fef7 	bl	80005dc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d903      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0ba      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80027fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002800:	4b5e      	ldr	r3, [pc, #376]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d0ed      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02e      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d12a      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002844:	4b4d      	ldr	r3, [pc, #308]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	0f1b      	lsrs	r3, r3, #28
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	019a      	lsls	r2, r3, #6
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	071b      	lsls	r3, r3, #28
 800286a:	4944      	ldr	r1, [pc, #272]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002872:	4b42      	ldr	r3, [pc, #264]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	493d      	ldr	r1, [pc, #244]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d022      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a0:	d11d      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	0e1b      	lsrs	r3, r3, #24
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	0f1b      	lsrs	r3, r3, #28
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	019a      	lsls	r2, r3, #6
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	431a      	orrs	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	071b      	lsls	r3, r3, #28
 80028d6:	4929      	ldr	r1, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d028      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ea:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	0e1b      	lsrs	r3, r3, #24
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	019a      	lsls	r2, r3, #6
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	071b      	lsls	r3, r3, #28
 800291e:	4917      	ldr	r1, [pc, #92]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4911      	ldr	r1, [pc, #68]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002948:	f7fd fe48 	bl	80005dc <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002950:	f7fd fe44 	bl	80005dc <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e007      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800296a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296e:	d1ef      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01d      	b.n	80029ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f002 fe66 	bl	8005678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 faac 	bl	8002f1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e01d      	b.n	8002a24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d106      	bne.n	8002a02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f815 	bl	8002a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f000 fa81 	bl	8002f1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fdfa 	bl	800364c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_TIM_PWM_Start+0x7c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_TIM_PWM_Start+0x2c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <HAL_TIM_PWM_Start+0x80>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x30>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_TIM_PWM_Start+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_TIM_PWM_Start+0x84>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d00b      	beq.n	8002ab0 <HAL_TIM_PWM_Start+0x70>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d007      	beq.n	8002ab0 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40010400 	.word	0x40010400
 8002ac4:	00010007 	.word	0x00010007

08002ac8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fdb6 	bl	800364c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <HAL_TIM_PWM_Stop+0xa8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_TIM_PWM_Stop+0x2c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_TIM_PWM_Stop+0xac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_PWM_Stop+0x30>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_TIM_PWM_Stop+0x32>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d017      	beq.n	8002b2e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_TIM_PWM_Stop+0x66>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	f240 4344 	movw	r3, #1092	; 0x444
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_TIM_PWM_Stop+0x66>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_TIM_PWM_Stop+0x96>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	f240 4344 	movw	r3, #1092	; 0x444
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_PWM_Stop+0x96>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e105      	b.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b14      	cmp	r3, #20
 8002ba6:	f200 80f0 	bhi.w	8002d8a <HAL_TIM_PWM_ConfigChannel+0x212>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002d8b 	.word	0x08002d8b
 8002bb8:	08002d8b 	.word	0x08002d8b
 8002bbc:	08002d8b 	.word	0x08002d8b
 8002bc0:	08002c45 	.word	0x08002c45
 8002bc4:	08002d8b 	.word	0x08002d8b
 8002bc8:	08002d8b 	.word	0x08002d8b
 8002bcc:	08002d8b 	.word	0x08002d8b
 8002bd0:	08002c87 	.word	0x08002c87
 8002bd4:	08002d8b 	.word	0x08002d8b
 8002bd8:	08002d8b 	.word	0x08002d8b
 8002bdc:	08002d8b 	.word	0x08002d8b
 8002be0:	08002cc7 	.word	0x08002cc7
 8002be4:	08002d8b 	.word	0x08002d8b
 8002be8:	08002d8b 	.word	0x08002d8b
 8002bec:	08002d8b 	.word	0x08002d8b
 8002bf0:	08002d09 	.word	0x08002d09
 8002bf4:	08002d8b 	.word	0x08002d8b
 8002bf8:	08002d8b 	.word	0x08002d8b
 8002bfc:	08002d8b 	.word	0x08002d8b
 8002c00:	08002d49 	.word	0x08002d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fa26 	bl	800305c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
      break;
 8002c42:	e0a3      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa78 	bl	8003140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6999      	ldr	r1, [r3, #24]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	021a      	lsls	r2, r3, #8
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
      break;
 8002c84:	e082      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 facf 	bl	8003230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0208 	orr.w	r2, r2, #8
 8002ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0204 	bic.w	r2, r2, #4
 8002cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69d9      	ldr	r1, [r3, #28]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	61da      	str	r2, [r3, #28]
      break;
 8002cc4:	e062      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fb25 	bl	800331c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69d9      	ldr	r1, [r3, #28]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	61da      	str	r2, [r3, #28]
      break;
 8002d06:	e041      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fb5c 	bl	80033cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0208 	orr.w	r2, r2, #8
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0204 	bic.w	r2, r2, #4
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d46:	e021      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fb8e 	bl	8003470 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	021a      	lsls	r2, r3, #8
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d88:	e000      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002d8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_ConfigClockSource+0x18>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0a6      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x166>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_TIM_ConfigClockSource+0x170>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d067      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x120>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d80b      	bhi.n	8002e14 <HAL_TIM_ConfigClockSource+0x6c>
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d073      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0x140>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d802      	bhi.n	8002e0a <HAL_TIM_ConfigClockSource+0x62>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d06f      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e08:	e078      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d06c      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0x140>
 8002e0e:	2b30      	cmp	r3, #48	; 0x30
 8002e10:	d06a      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e12:	e073      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d00d      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x8c>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d804      	bhi.n	8002e26 <HAL_TIM_ConfigClockSource+0x7e>
 8002e1c:	2b50      	cmp	r3, #80	; 0x50
 8002e1e:	d033      	beq.n	8002e88 <HAL_TIM_ConfigClockSource+0xe0>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d041      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e24:	e06a      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2a:	d066      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x152>
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e30:	d017      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e32:	e063      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6899      	ldr	r1, [r3, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f000 fbe2 	bl	800360c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	609a      	str	r2, [r3, #8]
      break;
 8002e60:	e04c      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f000 fbcb 	bl	800360c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e84:	609a      	str	r2, [r3, #8]
      break;
 8002e86:	e039      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f000 fb3f 	bl	8003518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2150      	movs	r1, #80	; 0x50
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fb98 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002ea6:	e029      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f000 fb5e 	bl	8003576 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2160      	movs	r1, #96	; 0x60
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fb88 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002ec6:	e019      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f000 fb1f 	bl	8003518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fb78 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002ee6:	e009      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f000 fb6f 	bl	80035d6 <TIM_ITRx_SetConfig>
      break;
 8002ef8:	e000      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	fffeff88 	.word	0xfffeff88

08002f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a40      	ldr	r2, [pc, #256]	; (8003030 <TIM_Base_SetConfig+0x114>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d00f      	beq.n	8002f5c <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3d      	ldr	r2, [pc, #244]	; (8003034 <TIM_Base_SetConfig+0x118>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <TIM_Base_SetConfig+0x11c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <TIM_Base_SetConfig+0x120>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <TIM_Base_SetConfig+0x124>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <TIM_Base_SetConfig+0x114>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02b      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d027      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <TIM_Base_SetConfig+0x118>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d023      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <TIM_Base_SetConfig+0x11c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01f      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <TIM_Base_SetConfig+0x120>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01b      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <TIM_Base_SetConfig+0x124>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d017      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a28      	ldr	r2, [pc, #160]	; (8003044 <TIM_Base_SetConfig+0x128>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a27      	ldr	r2, [pc, #156]	; (8003048 <TIM_Base_SetConfig+0x12c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00f      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <TIM_Base_SetConfig+0x130>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a25      	ldr	r2, [pc, #148]	; (8003050 <TIM_Base_SetConfig+0x134>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <TIM_Base_SetConfig+0x138>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <TIM_Base_SetConfig+0x13c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <TIM_Base_SetConfig+0x114>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0xf8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <TIM_Base_SetConfig+0x124>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d103      	bne.n	800301c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	615a      	str	r2, [r3, #20]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40010000 	.word	0x40010000
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00
 8003040:	40010400 	.word	0x40010400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40001800 	.word	0x40001800
 8003054:	40001c00 	.word	0x40001c00
 8003058:	40002000 	.word	0x40002000

0800305c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <TIM_OC1_SetConfig+0xd8>)
 8003088:	4013      	ands	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 0302 	bic.w	r3, r3, #2
 80030a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <TIM_OC1_SetConfig+0xdc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_OC1_SetConfig+0x64>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a20      	ldr	r2, [pc, #128]	; (800313c <TIM_OC1_SetConfig+0xe0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10c      	bne.n	80030da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <TIM_OC1_SetConfig+0xdc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_OC1_SetConfig+0x8e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <TIM_OC1_SetConfig+0xe0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d111      	bne.n	800310e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	fffeff8f 	.word	0xfffeff8f
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0210 	bic.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <TIM_OC2_SetConfig+0xe4>)
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0320 	bic.w	r3, r3, #32
 800318a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a23      	ldr	r2, [pc, #140]	; (8003228 <TIM_OC2_SetConfig+0xe8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_OC2_SetConfig+0x68>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a22      	ldr	r2, [pc, #136]	; (800322c <TIM_OC2_SetConfig+0xec>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10d      	bne.n	80031c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <TIM_OC2_SetConfig+0xe8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_OC2_SetConfig+0x94>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <TIM_OC2_SetConfig+0xec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d113      	bne.n	80031fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	feff8fff 	.word	0xfeff8fff
 8003228:	40010000 	.word	0x40010000
 800322c:	40010400 	.word	0x40010400

08003230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <TIM_OC3_SetConfig+0xe0>)
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <TIM_OC3_SetConfig+0xe4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC3_SetConfig+0x66>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <TIM_OC3_SetConfig+0xe8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <TIM_OC3_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_OC3_SetConfig+0x92>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <TIM_OC3_SetConfig+0xe8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d113      	bne.n	80032ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	fffeff8f 	.word	0xfffeff8f
 8003314:	40010000 	.word	0x40010000
 8003318:	40010400 	.word	0x40010400

0800331c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <TIM_OC4_SetConfig+0xa4>)
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	031b      	lsls	r3, r3, #12
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <TIM_OC4_SetConfig+0xa8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_OC4_SetConfig+0x68>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <TIM_OC4_SetConfig+0xac>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d109      	bne.n	8003398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	feff8fff 	.word	0xfeff8fff
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40010400 	.word	0x40010400

080033cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <TIM_OC5_SetConfig+0x98>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800340c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <TIM_OC5_SetConfig+0x9c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_OC5_SetConfig+0x5e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <TIM_OC5_SetConfig+0xa0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d109      	bne.n	800343e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	fffeff8f 	.word	0xfffeff8f
 8003468:	40010000 	.word	0x40010000
 800346c:	40010400 	.word	0x40010400

08003470 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <TIM_OC6_SetConfig+0x9c>)
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	051b      	lsls	r3, r3, #20
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <TIM_OC6_SetConfig+0xa0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_OC6_SetConfig+0x60>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <TIM_OC6_SetConfig+0xa4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d109      	bne.n	80034e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	feff8fff 	.word	0xfeff8fff
 8003510:	40010000 	.word	0x40010000
 8003514:	40010400 	.word	0x40010400

08003518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0201 	bic.w	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 030a 	bic.w	r3, r3, #10
 8003554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0210 	bic.w	r2, r3, #16
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	031b      	lsls	r3, r3, #12
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f043 0307 	orr.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	431a      	orrs	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2201      	movs	r2, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1a      	ldr	r2, [r3, #32]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	43db      	mvns	r3, r3
 800366e:	401a      	ands	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	431a      	orrs	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e045      	b.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e065      	b.n	8003838 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d115      	bne.n	8003826 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	051b      	lsls	r3, r3, #20
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40010000 	.word	0x40010000
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e040      	b.n	80038e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 ff8a 	bl	8005788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa9a 	bl	8003dc4 <UART_SetConfig>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e022      	b.n	80038e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fd32 	bl	800430c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fdb9 	bl	8004450 <UART_CheckIdleState>
 80038de:	4603      	mov	r3, r0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d17f      	bne.n	8003a00 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Transmit+0x24>
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e078      	b.n	8003a02 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UART_Transmit+0x36>
 800391a:	2302      	movs	r3, #2
 800391c:	e071      	b.n	8003a02 <HAL_UART_Transmit+0x11a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2221      	movs	r2, #33	; 0x21
 8003930:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003932:	f7fc fe53 	bl	80005dc <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d108      	bne.n	8003964 <HAL_UART_Transmit+0x7c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e003      	b.n	800396c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800396c:	e02c      	b.n	80039c8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fd98 	bl	80044ae <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e03c      	b.n	8003a02 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3302      	adds	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1cc      	bne.n	800396e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	2140      	movs	r1, #64	; 0x40
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fd65 	bl	80044ae <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e009      	b.n	8003a02 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	f040 808a 	bne.w	8003b38 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_UART_Receive_IT+0x24>
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e082      	b.n	8003b3a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Receive_IT+0x36>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e07b      	b.n	8003b3a <HAL_UART_Receive_IT+0x12e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d10e      	bne.n	8003a8e <HAL_UART_Receive_IT+0x82>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_UART_Receive_IT+0x78>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a82:	e02d      	b.n	8003ae0 <HAL_UART_Receive_IT+0xd4>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	22ff      	movs	r2, #255	; 0xff
 8003a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a8c:	e028      	b.n	8003ae0 <HAL_UART_Receive_IT+0xd4>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <HAL_UART_Receive_IT+0xa6>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <HAL_UART_Receive_IT+0x9c>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	22ff      	movs	r2, #255	; 0xff
 8003aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aa6:	e01b      	b.n	8003ae0 <HAL_UART_Receive_IT+0xd4>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	227f      	movs	r2, #127	; 0x7f
 8003aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ab0:	e016      	b.n	8003ae0 <HAL_UART_Receive_IT+0xd4>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aba:	d10d      	bne.n	8003ad8 <HAL_UART_Receive_IT+0xcc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_UART_Receive_IT+0xc2>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	227f      	movs	r2, #127	; 0x7f
 8003ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003acc:	e008      	b.n	8003ae0 <HAL_UART_Receive_IT+0xd4>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	223f      	movs	r2, #63	; 0x3f
 8003ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ad6:	e003      	b.n	8003ae0 <HAL_UART_Receive_IT+0xd4>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2222      	movs	r2, #34	; 0x22
 8003aea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	d107      	bne.n	8003b16 <HAL_UART_Receive_IT+0x10a>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_UART_Receive_IT+0x13c>)
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60
 8003b14:	e002      	b.n	8003b1c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_UART_Receive_IT+0x140>)
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003b32:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	08004683 	.word	0x08004683
 8003b4c:	080045dd 	.word	0x080045dd

08003b50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d113      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00e      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80eb 	beq.w	8003d72 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
      }
      return;
 8003ba4:	e0e5      	b.n	8003d72 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80c0 	beq.w	8003d2e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80b5 	beq.w	8003d2e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00e      	beq.n	8003bec <HAL_UART_IRQHandler+0x9c>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00e      	beq.n	8003c14 <HAL_UART_IRQHandler+0xc4>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2202      	movs	r2, #2
 8003c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <HAL_UART_IRQHandler+0xec>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c34:	f043 0202 	orr.w	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c66:	f043 0208 	orr.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07f      	beq.n	8003d76 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d004      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d031      	beq.n	8003d1c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fc40 	bl	800453e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d123      	bne.n	8003d14 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cda:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <HAL_UART_IRQHandler+0x234>)
 8003cea:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fdb2 	bl	800085a <HAL_DMA_Abort_IT>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d016      	beq.n	8003d2a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d06:	4610      	mov	r0, r2
 8003d08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0a:	e00e      	b.n	8003d2a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f84f 	bl	8003db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d12:	e00a      	b.n	8003d2a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f84b 	bl	8003db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1a:	e006      	b.n	8003d2a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f847 	bl	8003db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003d28:	e025      	b.n	8003d76 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2a:	bf00      	nop
    return;
 8003d2c:	e023      	b.n	8003d76 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d017      	beq.n	8003d7a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
    }
    return;
 8003d52:	e012      	b.n	8003d7a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00e      	beq.n	8003d7c <HAL_UART_IRQHandler+0x22c>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fc1e 	bl	80045aa <UART_EndTransmit_IT>
    return;
 8003d6e:	bf00      	nop
 8003d70:	e004      	b.n	8003d7c <HAL_UART_IRQHandler+0x22c>
      return;
 8003d72:	bf00      	nop
 8003d74:	e002      	b.n	8003d7c <HAL_UART_IRQHandler+0x22c>
    return;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_UART_IRQHandler+0x22c>
    return;
 8003d7a:	bf00      	nop
  }

}
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	0800457f 	.word	0x0800457f

08003d88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4bb1      	ldr	r3, [pc, #708]	; (80040b8 <UART_SetConfig+0x2f4>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	6939      	ldr	r1, [r7, #16]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a9f      	ldr	r2, [pc, #636]	; (80040bc <UART_SetConfig+0x2f8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d121      	bne.n	8003e88 <UART_SetConfig+0xc4>
 8003e44:	4b9e      	ldr	r3, [pc, #632]	; (80040c0 <UART_SetConfig+0x2fc>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d816      	bhi.n	8003e80 <UART_SetConfig+0xbc>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <UART_SetConfig+0x94>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e75 	.word	0x08003e75
 8003e60:	08003e6f 	.word	0x08003e6f
 8003e64:	08003e7b 	.word	0x08003e7b
 8003e68:	2301      	movs	r3, #1
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e151      	b.n	8004112 <UART_SetConfig+0x34e>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e14e      	b.n	8004112 <UART_SetConfig+0x34e>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e14b      	b.n	8004112 <UART_SetConfig+0x34e>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e148      	b.n	8004112 <UART_SetConfig+0x34e>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	bf00      	nop
 8003e86:	e144      	b.n	8004112 <UART_SetConfig+0x34e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a8d      	ldr	r2, [pc, #564]	; (80040c4 <UART_SetConfig+0x300>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d134      	bne.n	8003efc <UART_SetConfig+0x138>
 8003e92:	4b8b      	ldr	r3, [pc, #556]	; (80040c0 <UART_SetConfig+0x2fc>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d829      	bhi.n	8003ef4 <UART_SetConfig+0x130>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0xe4>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003ef5 	.word	0x08003ef5
 8003eb0:	08003ef5 	.word	0x08003ef5
 8003eb4:	08003ef5 	.word	0x08003ef5
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003ef5 	.word	0x08003ef5
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003ef5 	.word	0x08003ef5
 8003ec8:	08003ee3 	.word	0x08003ee3
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003eef 	.word	0x08003eef
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e117      	b.n	8004112 <UART_SetConfig+0x34e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e114      	b.n	8004112 <UART_SetConfig+0x34e>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e111      	b.n	8004112 <UART_SetConfig+0x34e>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e10e      	b.n	8004112 <UART_SetConfig+0x34e>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	bf00      	nop
 8003efa:	e10a      	b.n	8004112 <UART_SetConfig+0x34e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a71      	ldr	r2, [pc, #452]	; (80040c8 <UART_SetConfig+0x304>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d120      	bne.n	8003f48 <UART_SetConfig+0x184>
 8003f06:	4b6e      	ldr	r3, [pc, #440]	; (80040c0 <UART_SetConfig+0x2fc>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d00f      	beq.n	8003f34 <UART_SetConfig+0x170>
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d802      	bhi.n	8003f1e <UART_SetConfig+0x15a>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <UART_SetConfig+0x164>
 8003f1c:	e010      	b.n	8003f40 <UART_SetConfig+0x17c>
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d005      	beq.n	8003f2e <UART_SetConfig+0x16a>
 8003f22:	2b30      	cmp	r3, #48	; 0x30
 8003f24:	d009      	beq.n	8003f3a <UART_SetConfig+0x176>
 8003f26:	e00b      	b.n	8003f40 <UART_SetConfig+0x17c>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e0f1      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e0ee      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f34:	2304      	movs	r3, #4
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e0eb      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e0e8      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f40:	2310      	movs	r3, #16
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	bf00      	nop
 8003f46:	e0e4      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5f      	ldr	r2, [pc, #380]	; (80040cc <UART_SetConfig+0x308>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d120      	bne.n	8003f94 <UART_SetConfig+0x1d0>
 8003f52:	4b5b      	ldr	r3, [pc, #364]	; (80040c0 <UART_SetConfig+0x2fc>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d00f      	beq.n	8003f80 <UART_SetConfig+0x1bc>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d802      	bhi.n	8003f6a <UART_SetConfig+0x1a6>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <UART_SetConfig+0x1b0>
 8003f68:	e010      	b.n	8003f8c <UART_SetConfig+0x1c8>
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d005      	beq.n	8003f7a <UART_SetConfig+0x1b6>
 8003f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f70:	d009      	beq.n	8003f86 <UART_SetConfig+0x1c2>
 8003f72:	e00b      	b.n	8003f8c <UART_SetConfig+0x1c8>
 8003f74:	2300      	movs	r3, #0
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e0cb      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e0c8      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f80:	2304      	movs	r3, #4
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e0c5      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f86:	2308      	movs	r3, #8
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e0c2      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	bf00      	nop
 8003f92:	e0be      	b.n	8004112 <UART_SetConfig+0x34e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a4d      	ldr	r2, [pc, #308]	; (80040d0 <UART_SetConfig+0x30c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d124      	bne.n	8003fe8 <UART_SetConfig+0x224>
 8003f9e:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <UART_SetConfig+0x2fc>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fac:	d012      	beq.n	8003fd4 <UART_SetConfig+0x210>
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	d802      	bhi.n	8003fba <UART_SetConfig+0x1f6>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <UART_SetConfig+0x204>
 8003fb8:	e012      	b.n	8003fe0 <UART_SetConfig+0x21c>
 8003fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbe:	d006      	beq.n	8003fce <UART_SetConfig+0x20a>
 8003fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc4:	d009      	beq.n	8003fda <UART_SetConfig+0x216>
 8003fc6:	e00b      	b.n	8003fe0 <UART_SetConfig+0x21c>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e0a1      	b.n	8004112 <UART_SetConfig+0x34e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e09e      	b.n	8004112 <UART_SetConfig+0x34e>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e09b      	b.n	8004112 <UART_SetConfig+0x34e>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e098      	b.n	8004112 <UART_SetConfig+0x34e>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	bf00      	nop
 8003fe6:	e094      	b.n	8004112 <UART_SetConfig+0x34e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a39      	ldr	r2, [pc, #228]	; (80040d4 <UART_SetConfig+0x310>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d124      	bne.n	800403c <UART_SetConfig+0x278>
 8003ff2:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <UART_SetConfig+0x2fc>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004000:	d012      	beq.n	8004028 <UART_SetConfig+0x264>
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d802      	bhi.n	800400e <UART_SetConfig+0x24a>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <UART_SetConfig+0x258>
 800400c:	e012      	b.n	8004034 <UART_SetConfig+0x270>
 800400e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004012:	d006      	beq.n	8004022 <UART_SetConfig+0x25e>
 8004014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004018:	d009      	beq.n	800402e <UART_SetConfig+0x26a>
 800401a:	e00b      	b.n	8004034 <UART_SetConfig+0x270>
 800401c:	2301      	movs	r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e077      	b.n	8004112 <UART_SetConfig+0x34e>
 8004022:	2302      	movs	r3, #2
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e074      	b.n	8004112 <UART_SetConfig+0x34e>
 8004028:	2304      	movs	r3, #4
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e071      	b.n	8004112 <UART_SetConfig+0x34e>
 800402e:	2308      	movs	r3, #8
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e06e      	b.n	8004112 <UART_SetConfig+0x34e>
 8004034:	2310      	movs	r3, #16
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	bf00      	nop
 800403a:	e06a      	b.n	8004112 <UART_SetConfig+0x34e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <UART_SetConfig+0x314>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d124      	bne.n	8004090 <UART_SetConfig+0x2cc>
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <UART_SetConfig+0x2fc>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	d012      	beq.n	800407c <UART_SetConfig+0x2b8>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d802      	bhi.n	8004062 <UART_SetConfig+0x29e>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <UART_SetConfig+0x2ac>
 8004060:	e012      	b.n	8004088 <UART_SetConfig+0x2c4>
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	d006      	beq.n	8004076 <UART_SetConfig+0x2b2>
 8004068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800406c:	d009      	beq.n	8004082 <UART_SetConfig+0x2be>
 800406e:	e00b      	b.n	8004088 <UART_SetConfig+0x2c4>
 8004070:	2300      	movs	r3, #0
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e04d      	b.n	8004112 <UART_SetConfig+0x34e>
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e04a      	b.n	8004112 <UART_SetConfig+0x34e>
 800407c:	2304      	movs	r3, #4
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e047      	b.n	8004112 <UART_SetConfig+0x34e>
 8004082:	2308      	movs	r3, #8
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e044      	b.n	8004112 <UART_SetConfig+0x34e>
 8004088:	2310      	movs	r3, #16
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	bf00      	nop
 800408e:	e040      	b.n	8004112 <UART_SetConfig+0x34e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <UART_SetConfig+0x318>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d139      	bne.n	800410e <UART_SetConfig+0x34a>
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <UART_SetConfig+0x2fc>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a8:	d027      	beq.n	80040fa <UART_SetConfig+0x336>
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ae:	d817      	bhi.n	80040e0 <UART_SetConfig+0x31c>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01c      	beq.n	80040ee <UART_SetConfig+0x32a>
 80040b4:	e027      	b.n	8004106 <UART_SetConfig+0x342>
 80040b6:	bf00      	nop
 80040b8:	efff69f3 	.word	0xefff69f3
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004800 	.word	0x40004800
 80040cc:	40004c00 	.word	0x40004c00
 80040d0:	40005000 	.word	0x40005000
 80040d4:	40011400 	.word	0x40011400
 80040d8:	40007800 	.word	0x40007800
 80040dc:	40007c00 	.word	0x40007c00
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d006      	beq.n	80040f4 <UART_SetConfig+0x330>
 80040e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040ea:	d009      	beq.n	8004100 <UART_SetConfig+0x33c>
 80040ec:	e00b      	b.n	8004106 <UART_SetConfig+0x342>
 80040ee:	2300      	movs	r3, #0
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e00e      	b.n	8004112 <UART_SetConfig+0x34e>
 80040f4:	2302      	movs	r3, #2
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e00b      	b.n	8004112 <UART_SetConfig+0x34e>
 80040fa:	2304      	movs	r3, #4
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e008      	b.n	8004112 <UART_SetConfig+0x34e>
 8004100:	2308      	movs	r3, #8
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e005      	b.n	8004112 <UART_SetConfig+0x34e>
 8004106:	2310      	movs	r3, #16
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	bf00      	nop
 800410c:	e001      	b.n	8004112 <UART_SetConfig+0x34e>
 800410e:	2310      	movs	r3, #16
 8004110:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d17c      	bne.n	8004216 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800411c:	7ffb      	ldrb	r3, [r7, #31]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d859      	bhi.n	80041d6 <UART_SetConfig+0x412>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x364>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800416b 	.word	0x0800416b
 8004130:	08004189 	.word	0x08004189
 8004134:	080041d7 	.word	0x080041d7
 8004138:	080041a1 	.word	0x080041a1
 800413c:	080041d7 	.word	0x080041d7
 8004140:	080041d7 	.word	0x080041d7
 8004144:	080041d7 	.word	0x080041d7
 8004148:	080041bf 	.word	0x080041bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800414c:	f7fd ffca 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8004150:	4603      	mov	r3, r0
 8004152:	005a      	lsls	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	441a      	add	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	b29b      	uxth	r3, r3
 8004166:	61bb      	str	r3, [r7, #24]
        break;
 8004168:	e038      	b.n	80041dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800416a:	f7fd ffcf 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 800416e:	4603      	mov	r3, r0
 8004170:	005a      	lsls	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	b29b      	uxth	r3, r3
 8004184:	61bb      	str	r3, [r7, #24]
        break;
 8004186:	e029      	b.n	80041dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	085a      	lsrs	r2, r3, #1
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <UART_SetConfig+0x540>)
 8004190:	4413      	add	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6852      	ldr	r2, [r2, #4]
 8004196:	fbb3 f3f2 	udiv	r3, r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	61bb      	str	r3, [r7, #24]
        break;
 800419e:	e01d      	b.n	80041dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041a0:	f7fd febc 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 80041a4:	4603      	mov	r3, r0
 80041a6:	005a      	lsls	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	441a      	add	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e00e      	b.n	80041dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	61bb      	str	r3, [r7, #24]
        break;
 80041d4:	e002      	b.n	80041dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
        break;
 80041da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	d916      	bls.n	8004210 <UART_SetConfig+0x44c>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d212      	bcs.n	8004210 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f023 030f 	bic.w	r3, r3, #15
 80041f2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	b29a      	uxth	r2, r3
 8004200:	89fb      	ldrh	r3, [r7, #14]
 8004202:	4313      	orrs	r3, r2
 8004204:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	89fa      	ldrh	r2, [r7, #14]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	e06e      	b.n	80042ee <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
 8004214:	e06b      	b.n	80042ee <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004216:	7ffb      	ldrb	r3, [r7, #31]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d857      	bhi.n	80042cc <UART_SetConfig+0x508>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x460>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004249 	.word	0x08004249
 8004228:	08004265 	.word	0x08004265
 800422c:	08004281 	.word	0x08004281
 8004230:	080042cd 	.word	0x080042cd
 8004234:	08004299 	.word	0x08004299
 8004238:	080042cd 	.word	0x080042cd
 800423c:	080042cd 	.word	0x080042cd
 8004240:	080042cd 	.word	0x080042cd
 8004244:	080042b5 	.word	0x080042b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004248:	f7fd ff4c 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 800424c:	4602      	mov	r2, r0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	441a      	add	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	61bb      	str	r3, [r7, #24]
        break;
 8004262:	e036      	b.n	80042d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004264:	f7fd ff52 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8004268:	4602      	mov	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	b29b      	uxth	r3, r3
 800427c:	61bb      	str	r3, [r7, #24]
        break;
 800427e:	e028      	b.n	80042d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	085a      	lsrs	r2, r3, #1
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <UART_SetConfig+0x544>)
 8004288:	4413      	add	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6852      	ldr	r2, [r2, #4]
 800428e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	61bb      	str	r3, [r7, #24]
        break;
 8004296:	e01c      	b.n	80042d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004298:	f7fd fe40 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	61bb      	str	r3, [r7, #24]
        break;
 80042b2:	e00e      	b.n	80042d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	61bb      	str	r3, [r7, #24]
        break;
 80042ca:	e002      	b.n	80042d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
        break;
 80042d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d908      	bls.n	80042ea <UART_SetConfig+0x526>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d204      	bcs.n	80042ea <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	e001      	b.n	80042ee <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	01e84800 	.word	0x01e84800
 8004308:	00f42400 	.word	0x00f42400

0800430c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d10a      	bne.n	8004422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800445e:	f7fc f8bd 	bl	80005dc <HAL_GetTick>
 8004462:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b08      	cmp	r3, #8
 8004470:	d10e      	bne.n	8004490 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f814 	bl	80044ae <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e00a      	b.n	80044a6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044be:	e02a      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c6:	d026      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7fc f888 	bl	80005dc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <UART_WaitOnFlagUntilTimeout+0x30>
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11b      	bne.n	8004516 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e00f      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d0c5      	beq.n	80044c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004554:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff fc07 	bl	8003db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fbda 	bl	8003d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045ea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f0:	2b22      	cmp	r3, #34	; 0x22
 80045f2:	d13a      	bne.n	800466a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045fc:	89bb      	ldrh	r3, [r7, #12]
 80045fe:	b2d9      	uxtb	r1, r3
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	400a      	ands	r2, r1
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d121      	bne.n	800467a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004644:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fb9a 	bl	8003d9c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004668:	e007      	b.n	800467a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0208 	orr.w	r2, r2, #8
 8004678:	619a      	str	r2, [r3, #24]
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004690:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	d13a      	bne.n	8004710 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80046a8:	89ba      	ldrh	r2, [r7, #12]
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	4013      	ands	r3, r2
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d121      	bne.n	8004720 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fb47 	bl	8003d9c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800470e:	e007      	b.n	8004720 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0208 	orr.w	r2, r2, #8
 800471e:	619a      	str	r2, [r3, #24]
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d120      	bne.n	8004782 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <USB_CoreInit+0xac>)
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d105      	bne.n	8004776 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa60 	bl	8004c3c <USB_CoreReset>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e010      	b.n	80047a4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa54 	bl	8004c3c <USB_CoreReset>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10b      	bne.n	80047c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f043 0206 	orr.w	r2, r3, #6
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ce:	b004      	add	sp, #16
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	ffbdffbf 	.word	0xffbdffbf

080047d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 0201 	bic.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d106      	bne.n	8004826 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	e00b      	b.n	800483e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e001      	b.n	800483e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e003      	b.n	8004846 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800483e:	2032      	movs	r0, #50	; 0x32
 8004840:	f7fb fed8 	bl	80005f4 <HAL_Delay>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004850:	b084      	sub	sp, #16
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800485e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e009      	b.n	8004884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3340      	adds	r3, #64	; 0x40
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	2200      	movs	r2, #0
 800487c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3301      	adds	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b0e      	cmp	r3, #14
 8004888:	d9f2      	bls.n	8004870 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d112      	bne.n	80048b6 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e005      	b.n	80048c2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	4619      	mov	r1, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	461a      	mov	r2, r3
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048ee:	2100      	movs	r1, #0
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f971 	bl	8004bd8 <USB_SetDevSpeed>
 80048f6:	e018      	b.n	800492a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f96c 	bl	8004bd8 <USB_SetDevSpeed>
 8004900:	e013      	b.n	800492a <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	2b03      	cmp	r3, #3
 8004906:	d10c      	bne.n	8004922 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d104      	bne.n	8004918 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800490e:	2100      	movs	r1, #0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f961 	bl	8004bd8 <USB_SetDevSpeed>
 8004916:	e008      	b.n	800492a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004918:	2101      	movs	r1, #1
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f95c 	bl	8004bd8 <USB_SetDevSpeed>
 8004920:	e003      	b.n	800492a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004922:	2103      	movs	r1, #3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f957 	bl	8004bd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800492a:	2110      	movs	r1, #16
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f90b 	bl	8004b48 <USB_FlushTxFifo>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f929 	bl	8004b94 <USB_FlushRxFifo>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	461a      	mov	r2, r3
 8004960:	2300      	movs	r3, #0
 8004962:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e043      	b.n	80049fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498c:	d118      	bne.n	80049c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e013      	b.n	80049d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e008      	b.n	80049d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	461a      	mov	r2, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	461a      	mov	r2, r3
 80049e0:	2300      	movs	r3, #0
 80049e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	461a      	mov	r2, r3
 80049f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3301      	adds	r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3b7      	bcc.n	8004976 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e043      	b.n	8004a94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a22:	d118      	bne.n	8004a56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e013      	b.n	8004a68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e008      	b.n	8004a68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	461a      	mov	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	461a      	mov	r2, r3
 8004a88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3301      	adds	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3b7      	bcc.n	8004a0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aae:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d110      	bne.n	8004ad8 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <USB_DevInit+0x2e8>)
 8004ac0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <USB_DevInit+0x2ec>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f043 0210 	orr.w	r2, r3, #16
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <USB_DevInit+0x2f0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f043 0208 	orr.w	r2, r3, #8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <USB_DevInit+0x2f4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b34:	b004      	add	sp, #16
 8004b36:	4770      	bx	lr
 8004b38:	00800100 	.word	0x00800100
 8004b3c:	00010003 	.word	0x00010003
 8004b40:	803c3800 	.word	0x803c3800
 8004b44:	40000004 	.word	0x40000004

08004b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	019b      	lsls	r3, r3, #6
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <USB_FlushTxFifo+0x48>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d0f0      	beq.n	8004b62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <USB_FlushRxFifo+0x40>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e006      	b.n	8004bc6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d0f0      	beq.n	8004ba6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	00030d40 	.word	0x00030d40

08004bd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004c2a:	2003      	movs	r0, #3
 8004c2c:	f7fb fce2 	bl	80005f4 <HAL_Delay>

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <USB_CoreReset+0x64>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e01b      	b.n	8004c92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	daf2      	bge.n	8004c48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f043 0201 	orr.w	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3301      	adds	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <USB_CoreReset+0x64>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d0f0      	beq.n	8004c72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	00030d40 	.word	0x00030d40

08004ca4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <MX_ETH_Init+0x64>)
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <MX_ETH_Init+0x68>)
 8004cae:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <MX_ETH_Init+0x64>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <MX_ETH_Init+0x64>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8004cc4:	23e1      	movs	r3, #225	; 0xe1
 8004cc6:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <MX_ETH_Init+0x64>)
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <MX_ETH_Init+0x64>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <MX_ETH_Init+0x64>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <MX_ETH_Init+0x64>)
 8004ce8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004cec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8004cee:	4806      	ldr	r0, [pc, #24]	; (8004d08 <MX_ETH_Init+0x64>)
 8004cf0:	f7fb fdd6 	bl	80008a0 <HAL_ETH_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8004cfa:	f000 fb71 	bl	80053e0 <Error_Handler>
  }

}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	2000002c 	.word	0x2000002c
 8004d0c:	40028000 	.word	0x40028000

08004d10 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	60da      	str	r2, [r3, #12]
 8004d26:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a4e      	ldr	r2, [pc, #312]	; (8004e68 <HAL_ETH_MspInit+0x158>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	f040 8096 	bne.w	8004e60 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d34:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	4a4c      	ldr	r2, [pc, #304]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d40:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	623b      	str	r3, [r7, #32]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	4a46      	ldr	r2, [pc, #280]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d56:	6313      	str	r3, [r2, #48]	; 0x30
 8004d58:	4b44      	ldr	r3, [pc, #272]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d70:	4b3e      	ldr	r3, [pc, #248]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d7c:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	4a3a      	ldr	r2, [pc, #232]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	6313      	str	r3, [r2, #48]	; 0x30
 8004d88:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	4a34      	ldr	r2, [pc, #208]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004da0:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dac:	4b2f      	ldr	r3, [pc, #188]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	4a2e      	ldr	r2, [pc, #184]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	6313      	str	r3, [r2, #48]	; 0x30
 8004db8:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004dc4:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dce:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <HAL_ETH_MspInit+0x15c>)
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004ddc:	2332      	movs	r3, #50	; 0x32
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de8:	2303      	movs	r3, #3
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dec:	230b      	movs	r3, #11
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df4:	4619      	mov	r1, r3
 8004df6:	481e      	ldr	r0, [pc, #120]	; (8004e70 <HAL_ETH_MspInit+0x160>)
 8004df8:	f7fc f9be 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004dfc:	2386      	movs	r3, #134	; 0x86
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e00:	2302      	movs	r3, #2
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e0c:	230b      	movs	r3, #11
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e14:	4619      	mov	r1, r3
 8004e16:	4817      	ldr	r0, [pc, #92]	; (8004e74 <HAL_ETH_MspInit+0x164>)
 8004e18:	f7fc f9ae 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e2e:	230b      	movs	r3, #11
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e36:	4619      	mov	r1, r3
 8004e38:	480f      	ldr	r0, [pc, #60]	; (8004e78 <HAL_ETH_MspInit+0x168>)
 8004e3a:	f7fc f99d 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004e3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e50:	230b      	movs	r3, #11
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4808      	ldr	r0, [pc, #32]	; (8004e7c <HAL_ETH_MspInit+0x16c>)
 8004e5c:	f7fc f98c 	bl	8001178 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e60:	bf00      	nop
 8004e62:	3738      	adds	r7, #56	; 0x38
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40028000 	.word	0x40028000
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40020800 	.word	0x40020800
 8004e74:	40020000 	.word	0x40020000
 8004e78:	40020400 	.word	0x40020400
 8004e7c:	40021800 	.word	0x40021800

08004e80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e86:	f107 031c 	add.w	r3, r7, #28
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	60da      	str	r2, [r3, #12]
 8004e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e96:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea2:	4b49      	ldr	r3, [pc, #292]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004eae:	4b46      	ldr	r3, [pc, #280]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4a45      	ldr	r2, [pc, #276]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eba:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	4b40      	ldr	r3, [pc, #256]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	4a3f      	ldr	r2, [pc, #252]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed2:	4b3d      	ldr	r3, [pc, #244]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ede:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	4a39      	ldr	r2, [pc, #228]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ee4:	f043 0310 	orr.w	r3, r3, #16
 8004ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eea:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef6:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4a33      	ldr	r2, [pc, #204]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	6313      	str	r3, [r2, #48]	; 0x30
 8004f02:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	4a2d      	ldr	r2, [pc, #180]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f14:	f043 0308 	orr.w	r3, r3, #8
 8004f18:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	4a27      	ldr	r2, [pc, #156]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f30:	6313      	str	r3, [r2, #48]	; 0x30
 8004f32:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <MX_GPIO_Init+0x148>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004f44:	4821      	ldr	r0, [pc, #132]	; (8004fcc <MX_GPIO_Init+0x14c>)
 8004f46:	f7fc fad9 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	4820      	ldr	r0, [pc, #128]	; (8004fd0 <MX_GPIO_Init+0x150>)
 8004f50:	f7fc fad4 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <MX_GPIO_Init+0x154>)
 8004f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004f62:	f107 031c 	add.w	r3, r7, #28
 8004f66:	4619      	mov	r1, r3
 8004f68:	481b      	ldr	r0, [pc, #108]	; (8004fd8 <MX_GPIO_Init+0x158>)
 8004f6a:	f7fc f905 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004f6e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8004f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f74:	2301      	movs	r3, #1
 8004f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f80:	f107 031c 	add.w	r3, r7, #28
 8004f84:	4619      	mov	r1, r3
 8004f86:	4811      	ldr	r0, [pc, #68]	; (8004fcc <MX_GPIO_Init+0x14c>)
 8004f88:	f7fc f8f6 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004f8c:	2340      	movs	r3, #64	; 0x40
 8004f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f90:	2301      	movs	r3, #1
 8004f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	480b      	ldr	r0, [pc, #44]	; (8004fd0 <MX_GPIO_Init+0x150>)
 8004fa4:	f7fc f8e8 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fac:	2300      	movs	r3, #0
 8004fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004fb4:	f107 031c 	add.w	r3, r7, #28
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4805      	ldr	r0, [pc, #20]	; (8004fd0 <MX_GPIO_Init+0x150>)
 8004fbc:	f7fc f8dc 	bl	8001178 <HAL_GPIO_Init>

}
 8004fc0:	bf00      	nop
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020400 	.word	0x40020400
 8004fd0:	40021800 	.word	0x40021800
 8004fd4:	10110000 	.word	0x10110000
 8004fd8:	40020800 	.word	0x40020800

08004fdc <ServicioLeer>:
	//Se genera una interrupcion por cada caracter que llegue al buffer.
	HAL_UART_Receive_IT(&huart3, consola.buffer, 1);

}

int ServicioLeer(int a,char* b,int t) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	//Cant contiene la cantidad de caracteres que aun no se han leidos
	int Cant = (consola.posFin-consola.posIni)%1024;
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <ServicioLeer+0x8c>)
 8004fea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004fee:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <ServicioLeer+0x8c>)
 8004ff0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	425a      	negs	r2, r3
 8004ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ffc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005000:	bf58      	it	pl
 8005002:	4253      	negpl	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
	//En caso de que la cantidad sea menor a lo que se esta tratando de leer
	//Entonces solo se lee lo disponible
	if(Cant < t)t=Cant;
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	da01      	bge.n	8005012 <ServicioLeer+0x36>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	607b      	str	r3, [r7, #4]
	//Se va incrementando la posicion donde esta el puntero de lectura en el buffer circular
	for(int i=0;i<t;i++,consola.posIni++)
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e01c      	b.n	8005052 <ServicioLeer+0x76>
		//Se guarda cada caracter en el buffer (b)
		b[i]=consola.buffer[(i+consola.posIni)%1024];
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <ServicioLeer+0x8c>)
 800501a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	425a      	negs	r2, r3
 8005024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005028:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800502c:	bf58      	it	pl
 800502e:	4253      	negpl	r3, r2
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	440a      	add	r2, r1
 8005036:	490c      	ldr	r1, [pc, #48]	; (8005068 <ServicioLeer+0x8c>)
 8005038:	440b      	add	r3, r1
 800503a:	7a1b      	ldrb	r3, [r3, #8]
 800503c:	7013      	strb	r3, [r2, #0]
	for(int i=0;i<t;i++,consola.posIni++)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3301      	adds	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	4b08      	ldr	r3, [pc, #32]	; (8005068 <ServicioLeer+0x8c>)
 8005046:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800504a:	3301      	adds	r3, #1
 800504c:	4a06      	ldr	r2, [pc, #24]	; (8005068 <ServicioLeer+0x8c>)
 800504e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	dbde      	blt.n	8005018 <ServicioLeer+0x3c>
	//Se retorna la cantidad de caracteres leidos.
    return t;
 800505a:	687b      	ldr	r3, [r7, #4]
}
 800505c:	4618      	mov	r0, r3
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20000074 	.word	0x20000074

0800506c <ServicioEscribir>:

int ServicioEscribir(int a,char* b,int t) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
	//Archivo donde se va escribir, es decir, el archivo del huart3
	UART_HandleTypeDef* htmp = (UART_HandleTypeDef*)consola.harchivo;
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <ServicioEscribir+0x2c>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
	//Funcion HAL que me permite escribir en el archivo de un HUART
	HAL_UART_Transmit(htmp, b,t, 1000);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	b29a      	uxth	r2, r3
 8005082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	6978      	ldr	r0, [r7, #20]
 800508a:	f7fe fc2d 	bl	80038e8 <HAL_UART_Transmit>
	//Retorna el numero de caracteres que se escribieron
	return t;
 800508e:	687b      	ldr	r3, [r7, #4]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000074 	.word	0x20000074

0800509c <ServicioTicks>:

void ServicioTicks(uint32_t* ticks){
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	//Usando la funcion Hal_GetTick() que retorna la cantidad de ticks del sistema
	//desde que comenzo. Se pasa el resultado por referencia.
	*ticks = HAL_GetTick()/1000;
 80050a4:	f7fb fa9a 	bl	80005dc <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <ServicioTicks+0x24>)
 80050ac:	fba3 2302 	umull	r2, r3, r3, r2
 80050b0:	099a      	lsrs	r2, r3, #6
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	10624dd3 	.word	0x10624dd3

080050c4 <ServicioInitPWM>:

void ServicioInitPWM(){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	//Start PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80050c8:	2100      	movs	r1, #0
 80050ca:	4802      	ldr	r0, [pc, #8]	; (80050d4 <ServicioInitPWM+0x10>)
 80050cc:	f7fd fcb8 	bl	8002a40 <HAL_TIM_PWM_Start>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000484 	.word	0x20000484

080050d8 <ServicioPWMDutyCycle>:

void ServicioPWMDutyCycle(uint16_t pulsos){
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	80fb      	strh	r3, [r7, #6]
	//Duty cycle
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsos);
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <ServicioPWMDutyCycle+0x20>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000484 	.word	0x20000484

080050fc <ServicioStopPWM>:

void ServicioStopPWM() {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
	//Stop PWM
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005100:	2100      	movs	r1, #0
 8005102:	4802      	ldr	r0, [pc, #8]	; (800510c <ServicioStopPWM+0x10>)
 8005104:	f7fd fce0 	bl	8002ac8 <HAL_TIM_PWM_Stop>
}
 8005108:	bf00      	nop
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000484 	.word	0x20000484

08005110 <InitPWM>:
	__asm("mov r3,3;svc 0");
	//En la variable ticks, por referencia, se retorna el valor de los ticks
	*ticks = r;
}

void InitPWM(){
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
	//Servicio 4 es el de iniciar el PWM
	__asm("mov r3,4;svc 0");
 8005114:	f04f 0304 	mov.w	r3, #4
 8005118:	df00      	svc	0
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <DutyCycle>:

void DutyCycle(uint16_t pulsos){
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	80fb      	strh	r3, [r7, #6]
	//Servicio 6 es el de cambiar el ancho del PWM
	if(pulsos > htim1.Init.Period) pulsos = htim1.Init.Period;
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <DutyCycle+0x2c>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	429a      	cmp	r2, r3
 8005136:	d902      	bls.n	800513e <DutyCycle+0x1a>
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <DutyCycle+0x2c>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	80fb      	strh	r3, [r7, #6]
	__asm("mov r3,6;svc 0");
 800513e:	f04f 0306 	mov.w	r3, #6
 8005142:	df00      	svc	0
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000484 	.word	0x20000484

08005154 <USART3_IRQHandler>:
	//Servicio 5 es el de parar el PWM
	__asm("mov r3,5;svc 0");
}

//Manejador de interrupcion del UART3
void USART3_IRQHandler(void) {
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005158:	480e      	ldr	r0, [pc, #56]	; (8005194 <USART3_IRQHandler+0x40>)
 800515a:	f7fe fcf9 	bl	8003b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //Incrementando la posicion de escritura del buffer circular
  consola.posFin++;
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <USART3_IRQHandler+0x44>)
 8005160:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005164:	3301      	adds	r3, #1
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <USART3_IRQHandler+0x44>)
 8005168:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
  //Indicando donde poner el caracter que llego por el puerto serial tras la interrupcion
  HAL_UART_Receive_IT(&huart3,&consola.buffer[consola.posFin%1024],1);
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <USART3_IRQHandler+0x44>)
 800516e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005172:	425a      	negs	r2, r3
 8005174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005178:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800517c:	bf58      	it	pl
 800517e:	4253      	negpl	r3, r2
 8005180:	3308      	adds	r3, #8
 8005182:	4a05      	ldr	r2, [pc, #20]	; (8005198 <USART3_IRQHandler+0x44>)
 8005184:	4413      	add	r3, r2
 8005186:	2201      	movs	r2, #1
 8005188:	4619      	mov	r1, r3
 800518a:	4802      	ldr	r0, [pc, #8]	; (8005194 <USART3_IRQHandler+0x40>)
 800518c:	f7fe fc3e 	bl	8003a0c <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8005190:	bf00      	nop
 8005192:	bd80      	pop	{r7, pc}
 8005194:	200004c4 	.word	0x200004c4
 8005198:	20000074 	.word	0x20000074

0800519c <LlamadaSistema>:
 */
int ServicioLeer(int a,char* b,int t);
int ServicioEscribir(int a,char* b,int t);
void ServicioTicks(int* ticks);

void LlamadaSistema(int p1,int p2,int p3,int p4) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	//Eligiendo el servicio a consumir
   switch(p4) {
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d82c      	bhi.n	800520c <LlamadaSistema+0x70>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <LlamadaSistema+0x1c>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051df 	.word	0x080051df
 80051c0:	080051ed 	.word	0x080051ed
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	08005203 	.word	0x08005203
   case 1:
	   ServicioLeer(p1,(char*)p2,p3);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4619      	mov	r1, r3
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff ff00 	bl	8004fdc <ServicioLeer>
	   break;
 80051dc:	e015      	b.n	800520a <LlamadaSistema+0x6e>
   case 2:
	   ServicioEscribir(p1,(char*)p2,p3);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4619      	mov	r1, r3
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff ff41 	bl	800506c <ServicioEscribir>
	   break;
 80051ea:	e00e      	b.n	800520a <LlamadaSistema+0x6e>
   case 3:
	   ServicioTicks(p1);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff54 	bl	800509c <ServicioTicks>
	   break;
 80051f4:	e009      	b.n	800520a <LlamadaSistema+0x6e>
   case 4:
	   ServicioInitPWM();
 80051f6:	f7ff ff65 	bl	80050c4 <ServicioInitPWM>
	   break;
 80051fa:	e006      	b.n	800520a <LlamadaSistema+0x6e>
   case 5:
	   ServicioStopPWM();
 80051fc:	f7ff ff7e 	bl	80050fc <ServicioStopPWM>
	   break;
 8005200:	e003      	b.n	800520a <LlamadaSistema+0x6e>
   case 6:
	   ServicioPWMDutyCycle(p1);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ff68 	bl	80050d8 <ServicioPWMDutyCycle>
	   break;
 8005208:	bf00      	nop
   }
   return 0;
 800520a:	bf00      	nop
 800520c:	bf00      	nop
}
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800521a:	f7fb f98d 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800521e:	f000 f849 	bl	80052b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005222:	f7ff fe2d 	bl	8004e80 <MX_GPIO_Init>
  MX_ETH_Init();
 8005226:	f7ff fd3d 	bl	8004ca4 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800522a:	f000 faf9 	bl	8005820 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800522e:	f000 fa7b 	bl	8005728 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8005232:	f000 f973 	bl	800551c <MX_TIM1_Init>
  char ticks[10];
  uint32_t numberOfTicks = Ticks();
  itoa(numberOfTicks, ticks, 10);
  Escribir(1, "\n\rLa cantidad de ticks es: ", 27);
  Escribir(1, ticks, sizeof(numberOfTicks)/sizeof(char));*/
  InitPWM();
 8005236:	f7ff ff6b 	bl	8005110 <InitPWM>
  uint16_t pulse = 100;
 800523a:	2364      	movs	r3, #100	; 0x64
 800523c:	80fb      	strh	r3, [r7, #6]
  bool pressed = false;
 800523e:	2300      	movs	r3, #0
 8005240:	717b      	strb	r3, [r7, #5]
  bool flag = false;
 8005242:	2300      	movs	r3, #0
 8005244:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  GPIO_PinState userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8005246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800524a:	4818      	ldr	r0, [pc, #96]	; (80052ac <main+0x98>)
 800524c:	f7fc f93e 	bl	80014cc <HAL_GPIO_ReadPin>
 8005250:	4603      	mov	r3, r0
 8005252:	70fb      	strb	r3, [r7, #3]
	  if (userButton && !pressed) {
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d015      	beq.n	8005286 <main+0x72>
 800525a:	797b      	ldrb	r3, [r7, #5]
 800525c:	f083 0301 	eor.w	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00f      	beq.n	8005286 <main+0x72>
		  pressed = true;
 8005266:	2301      	movs	r3, #1
 8005268:	717b      	strb	r3, [r7, #5]
		  DutyCycle(pulse);
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff59 	bl	8005124 <DutyCycle>
		  if (flag) {
 8005272:	793b      	ldrb	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <main+0x6c>
	  		pulse -= 100;
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	3b64      	subs	r3, #100	; 0x64
 800527c:	80fb      	strh	r3, [r7, #6]
 800527e:	e002      	b.n	8005286 <main+0x72>
	  	  } else {
	  		pulse += 100;
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	3364      	adds	r3, #100	; 0x64
 8005284:	80fb      	strh	r3, [r7, #6]
	  	  }
      }

  	  if (pulse >= htim1.Init.Period) {
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <main+0x9c>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <main+0x82>
 		flag = true;
 8005290:	2301      	movs	r3, #1
 8005292:	713b      	strb	r3, [r7, #4]
 8005294:	e004      	b.n	80052a0 <main+0x8c>
	  } else if(pulse <= 0){
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <main+0x8c>
		flag = false;
 800529c:	2300      	movs	r3, #0
 800529e:	713b      	strb	r3, [r7, #4]
	  }

	  if (!userButton) {
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1cf      	bne.n	8005246 <main+0x32>
		 pressed = false;
 80052a6:	2300      	movs	r3, #0
 80052a8:	717b      	strb	r3, [r7, #5]
  while (1) {
 80052aa:	e7cc      	b.n	8005246 <main+0x32>
 80052ac:	40020800 	.word	0x40020800
 80052b0:	20000484 	.word	0x20000484

080052b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b0b8      	sub	sp, #224	; 0xe0
 80052b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052be:	2234      	movs	r2, #52	; 0x34
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fb84 	bl	80059d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052d8:	f107 0308 	add.w	r3, r7, #8
 80052dc:	2290      	movs	r2, #144	; 0x90
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fb75 	bl	80059d0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80052e6:	f7fc fa5f 	bl	80017a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <SystemClock_Config+0x120>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	4a39      	ldr	r2, [pc, #228]	; (80053d4 <SystemClock_Config+0x120>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6413      	str	r3, [r2, #64]	; 0x40
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <SystemClock_Config+0x120>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	607b      	str	r3, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005302:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <SystemClock_Config+0x124>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800530a:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <SystemClock_Config+0x124>)
 800530c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <SystemClock_Config+0x124>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800531e:	2301      	movs	r3, #1
 8005320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005324:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800532c:	2302      	movs	r3, #2
 800532e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800533a:	2304      	movs	r3, #4
 800533c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005340:	2360      	movs	r3, #96	; 0x60
 8005342:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005346:	2302      	movs	r3, #2
 8005348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800534c:	2304      	movs	r3, #4
 800534e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005352:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc fa86 	bl	8001868 <HAL_RCC_OscConfig>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005362:	f000 f83d 	bl	80053e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005366:	f7fc fa2f 	bl	80017c8 <HAL_PWREx_EnableOverDrive>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005370:	f000 f836 	bl	80053e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005374:	230f      	movs	r3, #15
 8005376:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800537a:	2302      	movs	r3, #2
 800537c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800538a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005394:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005398:	2103      	movs	r1, #3
 800539a:	4618      	mov	r0, r3
 800539c:	f7fc fcd6 	bl	8001d4c <HAL_RCC_ClockConfig>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80053a6:	f000 f81b 	bl	80053e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <SystemClock_Config+0x128>)
 80053ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80053ae:	2300      	movs	r3, #0
 80053b0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053b8:	f107 0308 	add.w	r3, r7, #8
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc feb9 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <SystemClock_Config+0x118>
  {
    Error_Handler();
 80053c8:	f000 f80a 	bl	80053e0 <Error_Handler>
  }
}
 80053cc:	bf00      	nop
 80053ce:	37e0      	adds	r7, #224	; 0xe0
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40007000 	.word	0x40007000
 80053dc:	00200100 	.word	0x00200100

080053e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_MspInit+0x44>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <HAL_MspInit+0x44>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <HAL_MspInit+0x44>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	607b      	str	r3, [r7, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540e:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_MspInit+0x44>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	4a08      	ldr	r2, [pc, #32]	; (8005434 <HAL_MspInit+0x44>)
 8005414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005418:	6453      	str	r3, [r2, #68]	; 0x44
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_MspInit+0x44>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800

08005438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005446:	b480      	push	{r7}
 8005448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800544a:	e7fe      	b.n	800544a <HardFault_Handler+0x4>

0800544c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <MemManage_Handler+0x4>

08005452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005456:	e7fe      	b.n	8005456 <BusFault_Handler+0x4>

08005458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800545c:	e7fe      	b.n	800545c <UsageFault_Handler+0x4>

0800545e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
	//Tamaño de lo que se quiere escribir en el puerto
	register int p3 asm("r2");
	//Servicio que se quiere consumir
	register int p4 asm("r3");
	//Testeando el registro de retorno LR contra el operador #4
	__asm("TST lr, #4");
 8005464:	f01e 0f04 	tst.w	lr, #4
	//Carga el valor del registro especifico MSP (Stack Pointer) a un registro general R0
	__asm("MRS r0, MSP;");
 8005468:	f3ef 8008 	mrs	r0, MSP
	int* Parametros=(int*)p1;
 800546c:	6078      	str	r0, [r7, #4]
	p1=Parametros[4];
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	6900      	ldr	r0, [r0, #16]
	//LLamando al sistema
	LlamadaSistema(p1, p2, p3, p4);
 8005472:	f7ff fe93 	bl	800519c <LlamadaSistema>
	Parametros[4]=p1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3310      	adds	r3, #16
 800547a:	4602      	mov	r2, r0
 800547c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054a6:	f7fb f885 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054b4:	4b15      	ldr	r3, [pc, #84]	; (800550c <SystemInit+0x5c>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	4a14      	ldr	r2, [pc, #80]	; (800550c <SystemInit+0x5c>)
 80054bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80054c4:	4b12      	ldr	r3, [pc, #72]	; (8005510 <SystemInit+0x60>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <SystemInit+0x60>)
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <SystemInit+0x60>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <SystemInit+0x60>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	490d      	ldr	r1, [pc, #52]	; (8005510 <SystemInit+0x60>)
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <SystemInit+0x64>)
 80054de:	4013      	ands	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <SystemInit+0x60>)
 80054e4:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <SystemInit+0x68>)
 80054e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <SystemInit+0x60>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a08      	ldr	r2, [pc, #32]	; (8005510 <SystemInit+0x60>)
 80054ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <SystemInit+0x60>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054fa:	4b04      	ldr	r3, [pc, #16]	; (800550c <SystemInit+0x5c>)
 80054fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005500:	609a      	str	r2, [r3, #8]
#endif
}
 8005502:	bf00      	nop
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000ed00 	.word	0xe000ed00
 8005510:	40023800 	.word	0x40023800
 8005514:	fef6ffff 	.word	0xfef6ffff
 8005518:	24003010 	.word	0x24003010

0800551c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b09a      	sub	sp, #104	; 0x68
 8005520:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	609a      	str	r2, [r3, #8]
 800552e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005530:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800553c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	611a      	str	r2, [r3, #16]
 800554c:	615a      	str	r2, [r3, #20]
 800554e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	222c      	movs	r2, #44	; 0x2c
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fa3a 	bl	80059d0 <memset>

  htim1.Instance = TIM1;
 800555c:	4b43      	ldr	r3, [pc, #268]	; (800566c <MX_TIM1_Init+0x150>)
 800555e:	4a44      	ldr	r2, [pc, #272]	; (8005670 <MX_TIM1_Init+0x154>)
 8005560:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96000;
 8005562:	4b42      	ldr	r3, [pc, #264]	; (800566c <MX_TIM1_Init+0x150>)
 8005564:	4a43      	ldr	r2, [pc, #268]	; (8005674 <MX_TIM1_Init+0x158>)
 8005566:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005568:	4b40      	ldr	r3, [pc, #256]	; (800566c <MX_TIM1_Init+0x150>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800556e:	4b3f      	ldr	r3, [pc, #252]	; (800566c <MX_TIM1_Init+0x150>)
 8005570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005574:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005576:	4b3d      	ldr	r3, [pc, #244]	; (800566c <MX_TIM1_Init+0x150>)
 8005578:	2200      	movs	r2, #0
 800557a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800557c:	4b3b      	ldr	r3, [pc, #236]	; (800566c <MX_TIM1_Init+0x150>)
 800557e:	2200      	movs	r2, #0
 8005580:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005582:	4b3a      	ldr	r3, [pc, #232]	; (800566c <MX_TIM1_Init+0x150>)
 8005584:	2200      	movs	r2, #0
 8005586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005588:	4838      	ldr	r0, [pc, #224]	; (800566c <MX_TIM1_Init+0x150>)
 800558a:	f7fd f9f9 	bl	8002980 <HAL_TIM_Base_Init>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005594:	f7ff ff24 	bl	80053e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800559c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800559e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055a2:	4619      	mov	r1, r3
 80055a4:	4831      	ldr	r0, [pc, #196]	; (800566c <MX_TIM1_Init+0x150>)
 80055a6:	f7fd fbff 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80055b0:	f7ff ff16 	bl	80053e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80055b4:	482d      	ldr	r0, [pc, #180]	; (800566c <MX_TIM1_Init+0x150>)
 80055b6:	f7fd fa0e 	bl	80029d6 <HAL_TIM_PWM_Init>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80055c0:	f7ff ff0e 	bl	80053e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055c4:	2300      	movs	r3, #0
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80055c8:	2300      	movs	r3, #0
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80055d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055d4:	4619      	mov	r1, r3
 80055d6:	4825      	ldr	r0, [pc, #148]	; (800566c <MX_TIM1_Init+0x150>)
 80055d8:	f7fe f85e 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80055e2:	f7ff fefd 	bl	80053e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055e6:	2360      	movs	r3, #96	; 0x60
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055ee:	2300      	movs	r3, #0
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005606:	2200      	movs	r2, #0
 8005608:	4619      	mov	r1, r3
 800560a:	4818      	ldr	r0, [pc, #96]	; (800566c <MX_TIM1_Init+0x150>)
 800560c:	f7fd fab4 	bl	8002b78 <HAL_TIM_PWM_ConfigChannel>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005616:	f7ff fee3 	bl	80053e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800562e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005632:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005638:	2300      	movs	r3, #0
 800563a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800563c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005646:	2300      	movs	r3, #0
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4807      	ldr	r0, [pc, #28]	; (800566c <MX_TIM1_Init+0x150>)
 8005650:	f7fe f87e 	bl	8003750 <HAL_TIMEx_ConfigBreakDeadTime>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800565a:	f7ff fec1 	bl	80053e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800565e:	4803      	ldr	r0, [pc, #12]	; (800566c <MX_TIM1_Init+0x150>)
 8005660:	f000 f82a 	bl	80056b8 <HAL_TIM_MspPostInit>

}
 8005664:	bf00      	nop
 8005666:	3768      	adds	r7, #104	; 0x68
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000484 	.word	0x20000484
 8005670:	40010000 	.word	0x40010000
 8005674:	00017700 	.word	0x00017700

08005678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <HAL_TIM_Base_MspInit+0x38>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d10b      	bne.n	80056a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <HAL_TIM_Base_MspInit+0x3c>)
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <HAL_TIM_Base_MspInit+0x3c>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6453      	str	r3, [r2, #68]	; 0x44
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <HAL_TIM_Base_MspInit+0x3c>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40023800 	.word	0x40023800

080056b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a11      	ldr	r2, [pc, #68]	; (800571c <HAL_TIM_MspPostInit+0x64>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d11c      	bne.n	8005714 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <HAL_TIM_MspPostInit+0x68>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <HAL_TIM_MspPostInit+0x68>)
 80056e0:	f043 0310 	orr.w	r3, r3, #16
 80056e4:	6313      	str	r3, [r2, #48]	; 0x30
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <HAL_TIM_MspPostInit+0x68>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f8:	2302      	movs	r3, #2
 80056fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005704:	2301      	movs	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	4619      	mov	r1, r3
 800570e:	4805      	ldr	r0, [pc, #20]	; (8005724 <HAL_TIM_MspPostInit+0x6c>)
 8005710:	f7fb fd32 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005714:	bf00      	nop
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40010000 	.word	0x40010000
 8005720:	40023800 	.word	0x40023800
 8005724:	40021000 	.word	0x40021000

08005728 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <MX_USART3_UART_Init+0x58>)
 800572e:	4a15      	ldr	r2, [pc, #84]	; (8005784 <MX_USART3_UART_Init+0x5c>)
 8005730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <MX_USART3_UART_Init+0x58>)
 8005734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <MX_USART3_UART_Init+0x58>)
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <MX_USART3_UART_Init+0x58>)
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005746:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <MX_USART3_UART_Init+0x58>)
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <MX_USART3_UART_Init+0x58>)
 800574e:	220c      	movs	r2, #12
 8005750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <MX_USART3_UART_Init+0x58>)
 8005754:	2200      	movs	r2, #0
 8005756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <MX_USART3_UART_Init+0x58>)
 800575a:	2200      	movs	r2, #0
 800575c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <MX_USART3_UART_Init+0x58>)
 8005760:	2200      	movs	r2, #0
 8005762:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <MX_USART3_UART_Init+0x58>)
 8005766:	2200      	movs	r2, #0
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800576a:	4805      	ldr	r0, [pc, #20]	; (8005780 <MX_USART3_UART_Init+0x58>)
 800576c:	f7fe f86e 	bl	800384c <HAL_UART_Init>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005776:	f7ff fe33 	bl	80053e0 <Error_Handler>
  }

}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200004c4 	.word	0x200004c4
 8005784:	40004800 	.word	0x40004800

08005788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 0314 	add.w	r3, r7, #20
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_UART_MspInit+0x8c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d130      	bne.n	800580c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <HAL_UART_MspInit+0x90>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_UART_MspInit+0x90>)
 80057b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <HAL_UART_MspInit+0x90>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_UART_MspInit+0x90>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	4a14      	ldr	r2, [pc, #80]	; (8005818 <HAL_UART_MspInit+0x90>)
 80057c8:	f043 0308 	orr.w	r3, r3, #8
 80057cc:	6313      	str	r3, [r2, #48]	; 0x30
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <HAL_UART_MspInit+0x90>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80057da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e0:	2302      	movs	r3, #2
 80057e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e8:	2303      	movs	r3, #3
 80057ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057ec:	2307      	movs	r3, #7
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4619      	mov	r1, r3
 80057f6:	4809      	ldr	r0, [pc, #36]	; (800581c <HAL_UART_MspInit+0x94>)
 80057f8:	f7fb fcbe 	bl	8001178 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	2100      	movs	r1, #0
 8005800:	2027      	movs	r0, #39	; 0x27
 8005802:	f7fa fff4 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005806:	2027      	movs	r0, #39	; 0x27
 8005808:	f7fb f80d 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800580c:	bf00      	nop
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40004800 	.word	0x40004800
 8005818:	40023800 	.word	0x40023800
 800581c:	40020c00 	.word	0x40020c00

08005820 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005824:	4b14      	ldr	r3, [pc, #80]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800582a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800582e:	2206      	movs	r2, #6
 8005830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005832:	4b11      	ldr	r3, [pc, #68]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005834:	2202      	movs	r2, #2
 8005836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005840:	2202      	movs	r2, #2
 8005842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005846:	2201      	movs	r2, #1
 8005848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800584c:	2200      	movs	r2, #0
 800584e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005852:	2200      	movs	r2, #0
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005858:	2201      	movs	r2, #1
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005862:	4805      	ldr	r0, [pc, #20]	; (8005878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005864:	f7fb fe63 	bl	800152e <HAL_PCD_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800586e:	f7ff fdb7 	bl	80053e0 <Error_Handler>
  }

}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000544 	.word	0x20000544

0800587c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800589c:	d141      	bne.n	8005922 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800589e:	4b23      	ldr	r3, [pc, #140]	; (800592c <HAL_PCD_MspInit+0xb0>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_PCD_MspInit+0xb0>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	6313      	str	r3, [r2, #48]	; 0x30
 80058aa:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_PCD_MspInit+0xb0>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80058b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80058ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058bc:	2302      	movs	r3, #2
 80058be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c4:	2303      	movs	r3, #3
 80058c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80058c8:	230a      	movs	r3, #10
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	4619      	mov	r1, r3
 80058d2:	4817      	ldr	r0, [pc, #92]	; (8005930 <HAL_PCD_MspInit+0xb4>)
 80058d4:	f7fb fc50 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80058d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058de:	2300      	movs	r3, #0
 80058e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	4619      	mov	r1, r3
 80058ec:	4810      	ldr	r0, [pc, #64]	; (8005930 <HAL_PCD_MspInit+0xb4>)
 80058ee:	f7fb fc43 	bl	8001178 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <HAL_PCD_MspInit+0xb0>)
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	4a0d      	ldr	r2, [pc, #52]	; (800592c <HAL_PCD_MspInit+0xb0>)
 80058f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fc:	6353      	str	r3, [r2, #52]	; 0x34
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <HAL_PCD_MspInit+0xb0>)
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4b08      	ldr	r3, [pc, #32]	; (800592c <HAL_PCD_MspInit+0xb0>)
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	4a07      	ldr	r2, [pc, #28]	; (800592c <HAL_PCD_MspInit+0xb0>)
 8005910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005914:	6453      	str	r3, [r2, #68]	; 0x44
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_PCD_MspInit+0xb0>)
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005922:	bf00      	nop
 8005924:	3728      	adds	r7, #40	; 0x28
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40023800 	.word	0x40023800
 8005930:	40020000 	.word	0x40020000

08005934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800596c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005938:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800593a:	e003      	b.n	8005944 <LoopCopyDataInit>

0800593c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800593e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005940:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005942:	3104      	adds	r1, #4

08005944 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005944:	480b      	ldr	r0, [pc, #44]	; (8005974 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005948:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800594a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800594c:	d3f6      	bcc.n	800593c <CopyDataInit>
  ldr  r2, =_sbss
 800594e:	4a0b      	ldr	r2, [pc, #44]	; (800597c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005950:	e002      	b.n	8005958 <LoopFillZerobss>

08005952 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005952:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005954:	f842 3b04 	str.w	r3, [r2], #4

08005958 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800595a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800595c:	d3f9      	bcc.n	8005952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800595e:	f7ff fda7 	bl	80054b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005962:	f000 f811 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005966:	f7ff fc55 	bl	8005214 <main>
  bx  lr    
 800596a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800596c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005970:	08005a20 	.word	0x08005a20
  ldr  r0, =_sdata
 8005974:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005978:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800597c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8005980:	20000948 	.word	0x20000948

08005984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005984:	e7fe      	b.n	8005984 <ADC_IRQHandler>
	...

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4e0d      	ldr	r6, [pc, #52]	; (80059c0 <__libc_init_array+0x38>)
 800598c:	4c0d      	ldr	r4, [pc, #52]	; (80059c4 <__libc_init_array+0x3c>)
 800598e:	1ba4      	subs	r4, r4, r6
 8005990:	10a4      	asrs	r4, r4, #2
 8005992:	2500      	movs	r5, #0
 8005994:	42a5      	cmp	r5, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	4e0b      	ldr	r6, [pc, #44]	; (80059c8 <__libc_init_array+0x40>)
 800599a:	4c0c      	ldr	r4, [pc, #48]	; (80059cc <__libc_init_array+0x44>)
 800599c:	f000 f820 	bl	80059e0 <_init>
 80059a0:	1ba4      	subs	r4, r4, r6
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	2500      	movs	r5, #0
 80059a6:	42a5      	cmp	r5, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059b0:	4798      	blx	r3
 80059b2:	3501      	adds	r5, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ba:	4798      	blx	r3
 80059bc:	3501      	adds	r5, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08005a18 	.word	0x08005a18
 80059c4:	08005a18 	.word	0x08005a18
 80059c8:	08005a18 	.word	0x08005a18
 80059cc:	08005a1c 	.word	0x08005a1c

080059d0 <memset>:
 80059d0:	4402      	add	r2, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d100      	bne.n	80059da <memset+0xa>
 80059d8:	4770      	bx	lr
 80059da:	f803 1b01 	strb.w	r1, [r3], #1
 80059de:	e7f9      	b.n	80059d4 <memset+0x4>

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
